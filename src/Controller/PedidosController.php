<?php
declare(strict_types=1);

namespace App\Controller;

use App\Utility\PedidosStatusEnum;
use Cake\Datasource\Exception\InvalidPrimaryKeyException;
use Cake\Datasource\Exception\RecordNotFoundException;
use Cake\Event\EventInterface;
use Cake\ORM\Query;
use Exception;

/**
 * Pedidos Controller
 *
 * @property \App\Model\Table\PedidosTable $Pedidos
 */
class PedidosController extends AppController
{

    public function beforeFilter(EventInterface $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub

        $this->Authentication->addUnauthenticatedActions(['login']);

        $user = $this->Authentication->getIdentity();
        if (isset($user) and $user->role === 'user') {
            if (!in_array($this->request->getParam('action'), ['index', 'edit', 'view', 'getSubCategoriesByCategory',
                'getProductById', 'addProductoToCartSession', 'getPricesByProduct', 'getDescuentosByProduct', 'deleteDescuentoById',
                'deleteProductFromCartSession'])) {
                //$this->redirect($this->request->referer());
                $this->Flash->error('Usted no esta autorizado para acceder al Sitio Solicitado');
                $this->redirect(['controller' => 'Index', 'action' => 'index']);
            }

        }
        $this->loadCartProduct();

    }


    public function index()
    {

        $pedidos = $this->Pedidos->find('all', [
            'contain' => ['Clientes', 'Productos']
        ]);

        //debug($pedidos->toArray());

        $this->set(compact('pedidos'));


    }



    public function addProductoIndex($id_pedido = null)
    {
        //AGrego los productos al pedido
        //Traigo los productos que no estan en el pedido

        $model_productos_pedidos = $this->getTableLocator()->get('ProductosPedidos');

        $prod_ped = $model_productos_pedidos->find()
            ->select(['idproductos' => 'productos_idproductos'])
            ->where(['pedidos_idpedidos' => $id_pedido]);

        //debug($prod_ped->toArray());

        $productos_model = $this->getTableLocator()->get('Productos');

        $productos = $productos_model->find('all', [
            'contain' => ['Categories', 'Subcategories', 'Precios' => function(Query $q){

                return $q->where(['active' => 1]);
            }, 'Descuentos' => function(Query $q){

                return $q->where(['active' => 1]);
            }]
        ]) ->where(['idproductos NOT IN' => $prod_ped]);;



        //debug($productos->toArray());
        $this->set(compact('productos'));
        $this->set(compact('id_pedido'));
    }





    public function view($id = null)
    {

        try {

            //Variable usada para el sidebar

            $pedidos = $this->Pedidos->get($id, [
                'contain' => ['Clientes', 'Productos' => ['Categories', 'Subcategories']]]);


            $totales = $this->getTotales($id);

            $idpedidos = $id;


            //total de productos
            $cant_productos = $this->getTotalesProductos($idpedidos)->suma;




            $this->set(compact('pedidos'));
            $this->set(compact('totales'));
            $this->set(compact('idpedidos'));
            $this->set(compact('cant_productos'));


        } catch (InvalidPrimaryKeyException $e) {
            //$this->redirect($this->request->referer());
            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));

        } catch (RecordNotFoundException $e) {
            //$this->redirect($this->request->referer());
            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
        } catch (Exception $e) {
            debug($e);
            //$this->redirect($this->request->referer());
            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
        }

    }


    public function edit($id_pedido = null, $id_producto = null)
    {

        if ($id_pedido != null){
            try {

                $producto = $this->Pedidos->get($id_pedido, [
                    'contain' => ['Productos' => function (Query $q) use($id_producto){

                        return $q->where(['idproductos' => $id_producto]);

                    }]
                ]);



                //debug($producto->toArray());



            } catch (InvalidPrimaryKeyException $e){
                $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));

            } catch (RecordNotFoundException $e){
                $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
            } catch (Exception $e){
                $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
            }


        }

    }



    public function changeStatus($id_pedido = null)
    {
        try {

            //Variable usada para el sidebar

            $pedido = $this->Pedidos->get($id_pedido, []);

            $status = [
                PedidosStatusEnum::CANCEL => PedidosStatusEnum::CANCEL,
                PedidosStatusEnum::COMPLETED => PedidosStatusEnum::COMPLETED,
                PedidosStatusEnum::DISTRIBUTION => PedidosStatusEnum::DISTRIBUTION,
                PedidosStatusEnum::ORDER => PedidosStatusEnum::ORDER,
                PedidosStatusEnum::PROCESSING => PedidosStatusEnum::PROCESSING
            ];



            if ($this->request->is(['patch', 'post', 'put'])) {

                $pedido = $this->Pedidos->patchEntity($pedido, $this->request->getData());

                if($this->Pedidos->save($pedido)){
                    $this->Flash->success(__('Se ha cambiado el Estado correctamente.'));

                    return $this->redirect(['action' => 'view', $id_pedido]);
                }


            }

            $this->set(compact('id_pedido'));
            $this->set(compact('pedido'));
            $this->set(compact('status'));


        } catch (InvalidPrimaryKeyException $e) {
            //debug($e);

            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
            return  $this->redirect($this->request->referer());

        } catch (RecordNotFoundException $e) {

            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
            return  $this->redirect($this->request->referer());
        } catch (Exception $e) {

            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
            return  $this->redirect($this->request->referer());
        }


    }

    public function changeStatusByStatus($id_pedido = null, $status = null)
    {

        $this->autoRender = false;

        //return false;

        try {

            //Variable usada para el sidebar

            $pedido = $this->Pedidos->get($id_pedido, []);
            $pedido->status = $status;


            if($this->Pedidos->save($pedido)){

                return true;
            }


        } catch (InvalidPrimaryKeyException $e) {
            //debug($e);

            //$this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
            return false;

        } catch (RecordNotFoundException $e) {

            //$this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
            return false;
        } catch (Exception $e) {

            //$this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
            return false;
        }


    }

    public function updatePedido($id_pedido = null)
    {
        $this->disableAutoRender();


        //Traigo los productos usando el pedido
        $model_prodped = $this->getTableLocator()->get('ProductosPedidos');

        $pedido = $this->Pedidos->get($id_pedido);

        //  return $model_pedidos->find('GetMaxNumberPedidos', [])->first()->max;

        $subtotal = $model_prodped->find('GetTotales', ['pedidos_idpedidos' => $id_pedido])->first();

        //traigo el totl

        $pedido = $this->Pedidos->get($id_pedido);

        $pedido->subtotal = $subtotal->subtotal;
        $pedido->descuentos = $subtotal->total_descuento;
        $pedido->total = $subtotal->total - $pedido->descuento_general;

        if ($this->Pedidos->save($pedido)){

            return true;
        }

        return false;

    }



    public function setDescuentoGeneral($id = null)
    {
        if ($id == null)
        {
            $this->Flash->error(__('Error de acceso. Intenta nuevamente'));
            return $this->redirect($this->referer());
        } else {


            try {

                //Variable usada para el sidebar

                $pedido = $this->Pedidos->get($id, []);

                $this->set(compact('pedido'));

                if ($this->request->is(['patch', 'post', 'put'])){
                    $pedido = $this->Pedidos->patchEntity($pedido, $this->request->getData());


                    //modifico tmb el total general
                    $pedido->total = $pedido->subtotal -  $pedido->descuentos -  $pedido->descuento_general;




                    if($this->Pedidos->save($pedido)){

                        $this->Flash->success(__('El Descuento se almaceno correctamente.'));

                        return $this->redirect(['action' => 'view', $id]);
                    }


                }




            } catch (InvalidPrimaryKeyException $e) {
                //debug($e);

                $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));

            } catch (RecordNotFoundException $e) {

                $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));

            } catch (Exception $e) {

                $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
                //return false;
            }



        }

    }


    public function getTotales($id_pedido = null)
    {
        //$this->autoRender = false;
        $this->layout = 'empty';
        //debug($id_pedido);

        //Traigo los productos usando el pedido
        $model_prodped = $this->getTableLocator()->get('ProductosPedidos');


        $subtotal = $model_prodped->find('GetTotales', ['pedidos_idpedidos' => $id_pedido])->first();

        //traigo el totl
        return $subtotal;
    }

    public function getTotalesProductos($id_pedido = null)
    {
        $model_prodped = $this->getTableLocator()->get('ProductosPedidos');

        $total = $model_prodped->find('GetCantidadProductos', ['idpedidos' => $id_pedido])->first();

        return $total;

    }
}
