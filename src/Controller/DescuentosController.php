<?php
declare(strict_types=1);

namespace App\Controller;

use Cake\Datasource\Exception\InvalidPrimaryKeyException;
use Cake\Datasource\Exception\RecordNotFoundException;
use Cake\Event\EventInterface;

/**
 * Descuentos Controller
 *
 * @property \App\Model\Table\DescuentosTable $Descuentos
 */
class DescuentosController extends AppController
{

    public function beforeFilter(EventInterface $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub


        $user = $this->Authentication->getIdentity();
        if(isset($user) and $user->role === 'user')
        {
            if (!in_array($this->request->getParam('action'), ['index', 'edit'])) {
                //$this->redirect($this->request->referer());
                $this->Flash->error('Usted no esta autorizado para acceder al Sitio Solicitado');
                $this->redirect(['controller' => 'Index', 'action' => 'index']);
            }

        }
        $this->loadCartProduct();
    }

    public function add($id_productos = null)
    {
        if ($id_productos == null)
        {
            $this->Flash->error('Tenemos inconvenientes para actualizar el Descuento. Intente nuevamente.');
            return $this->redirect($this->request->referer());
        }

        $descuento = $this->Descuentos->newEmptyEntity();

        if ($this->request->is('post')) {



            $options['idproducto'] = $id_productos;
            //traigo el ultimo precio con valor
            //debug(isset($this->Descuentos->find('GetLastDescuentoValor', $options)->toArray()[0]->idprecios));
            $id_descuento_valor = !isset($this->Descuentos->find('GetLastDescuentoValor', $options)->toArray()[0]->iddescuentos) ?
                false : $this->Descuentos->find('GetLastDescuentoValor', $options)->toArray()[0]->iddescuentos;

            //debug($id_descuento_valor);
            if ($id_descuento_valor) {
                if($this->_setDescuentoToFalse($id_descuento_valor))
                {
                    $descuento = $this->Descuentos->patchEntity($descuento, $this->request->getData());

                    //recupero el tipe de descuento
                    $tipo = $this->request->getData()['tipo'];
                    if ($tipo == 1)
                    {
                        $descuento->precio = $this->_getValueDescuentoFromType($this->request->getData()['precio'], $id_productos);
                    }

                    if ($descuento->precio != null)
                    {
                        $descuento->productos_idproductos = $id_productos;

                         if ($this->Descuentos->save($descuento)) {
                             $this->Flash->success(__('El Descuento se almaceno correctamente gugugug.'));


                             return $this->redirect(['controller' => 'Productos', 'action' => 'viewConfig', $id_productos]);
                         }
                    }


                    $this->Flash->error(__('El Descuento no se pudo guardar. Intente nuevamente.'));
                } else {
                    $this->Flash->error(__('El Descuento no se pudo guardar. Intente nuevamente.'));
                }
            } else {

                $descuento = $this->Descuentos->patchEntity($descuento, $this->request->getData());

                $descuento->productos_idproductos = $id_productos;

                //recupero el tipe de descuento
                $tipo = $this->request->getData()['tipo'];
                if ($tipo == 1)
                {
                    $descuento->precio = $this->_getValueDescuentoFromType($this->request->getData()['precio'], $id_productos);
                }

                if ($descuento->precio != null)
                {
                    $descuento->productos_idproductos = $id_productos;

                    if ($this->Descuentos->save($descuento)) {
                        $this->Flash->success(__('El Descuento se almaceno correctamente.'));


                        return $this->redirect(['controller' => 'Productos', 'action' => 'viewConfig', $id_productos]);
                    }
                }
                $this->Flash->error(__('El Descuento no se pudo guardar. Intente nuevamente.'));
            }




        }

        $this->set(compact('descuento'));

    }


    public function edit($id = null, $id_productos = null)
    {
        try{

            $descuentos =  $this->Descuentos->get($id);


            if ($this->request->is(['patch', 'post', 'put'])) {
                $descuentos = $this->Descuentos->patchEntity($descuentos, $this->request->getData());

                $tipo = $this->request->getData()['tipo'];

                if ($tipo == 1)
                {
                    $descuentos->precio = $this->_getValueDescuentoFromType($this->request->getData()['precio'], $id_productos);
                }

                if ($descuentos->precio != null)
                {

                    if ($this->Descuentos->save($descuentos)) {
                        $this->Flash->success(__('El Descuento se almaceno correctamente.'));

                        return $this->redirect(['controller' => 'Productos', 'action' => 'viewConfig', $id_productos]);
                    }
                }

                $this->Flash->error(__('El Descuento no se pudo editar. Intente nuevamente.'));

            }
            $this->set(compact('descuentos'));
        } catch (InvalidPrimaryKeyException $e){
            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));

        } catch (RecordNotFoundException $e){
            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
        }
        catch (Exception $e){
            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
        }
    }
    private function _getValueDescuentoFromType($descuento = null, $id_productos)
    {
        //tengo que usar la tabla precio
        $model_precio = $this->getTableLocator()->get('Precios');

        $precio = $model_precio->find('all', [
            'fields' => ['precio']
        ])->where(['active' => 1, 'productos_idproductos' => $id_productos]);

        //debug($precio->toArray()[0]->precio);

        if (isset($precio->toArray()[0]->precio))
        {
            return ($precio->toArray()[0]->precio / 100 * $descuento);
        }



        return null;



    }
    private function _setDescuentoToFalse($id_product)
    {
        try{

            $precio =  $this->Descuentos->get($id_product);
            $precio->active = 0;
            date_default_timezone_set('America/Argentina/Buenos_Aires');
            $precio->finished = date("Y-m-d H:i:s");;

            if ($this->Descuentos->save($precio)) {
                return true;

            }

        } catch (InvalidPrimaryKeyException $e){
            return false;
        } catch (RecordNotFoundException $e){
            return false;
        }
        catch (Exception $e){
            return false;

        }
    }

    public function setDescuentoToFalse($id = null)
    {
        $this->autoRender = false;
        try{

            $precio =  $this->Descuentos->get($id);
            $precio->active = 0;
            date_default_timezone_set('America/Argentina/Buenos_Aires');
            $precio->finished = date("Y-m-d H:i:s");;

            if ($this->Descuentos->save($precio)) {

                $this->Flash->success(__('El Descuento se desactivo correctamente.'));
            }

        } catch (InvalidPrimaryKeyException $e){
            $this->Flash->error(__('El Descuento no se pudo guardar. Intente nuevamente.'));
        } catch (RecordNotFoundException $e){
            $this->Flash->error(__('El Descuento no se pudo guardar. Intente nuevamente.'));
        }
        catch (Exception $e){
            $this->Flash->error(__('El Descuento no se pudo guardar. Intente nuevamente.'));

        }
        $this->redirect($this->request->referer());
    }


    public function getDescuentoByProducto($id_producto = null)
    {
        $this->autoRender = false;

        if ($id_producto == null) {
            return false;
        } else {

            try {

                $conditions = ['active' => 1, 'productos_idproductos' => $id_producto];

                $descuentos = $this->Descuentos->find('all', [

                ])->where($conditions)
                    ->first();



                return $descuentos == null ? null : $descuentos->precio;


            } catch (InvalidPrimaryKeyException $e) {
                //$this->redirect($this->request->referer());
                $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));

            } catch (RecordNotFoundException $e) {
                //$this->redirect($this->request->referer());
                $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
            } catch (Exception $e) {
                //debug($e);
                //$this->redirect($this->request->referer());
                $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
            }

            return false;

        }


    }


}
