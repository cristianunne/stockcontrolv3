<?php
declare(strict_types=1);

namespace App\Controller;

use Cake\Datasource\ConnectionManager;
use Cake\Datasource\Exception\InvalidPrimaryKeyException;
use Cake\Datasource\Exception\RecordNotFoundException;
use Cake\Event\EventInterface;
use Exception;

/**
 * ProductosComprasstock Controller
 *
 * @property \App\Model\Table\ProductosComprasstockTable $ProductosComprasstock
 */
class ProductosComprasstockController extends AppController
{
    public function beforeFilter(EventInterface $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub

        $this->Authentication->addUnauthenticatedActions(['login']);

        $user = $this->Authentication->getIdentity();
        if (isset($user) and $user->role === 'user') {
            if (!in_array($this->request->getParam('action'), ['index', 'edit', 'view'])) {
                //$this->redirect($this->request->referer());
                $this->Flash->error('Usted no esta autorizado para acceder al Sitio Solicitado');
                $this->redirect(['controller' => 'Index', 'action' => 'index']);
            }

        }
        $this->loadCartProduct();

    }


    public function add($id_compras_stock = null, $idproducto = null)
    {

        if ($id_compras_stock == null or $idproducto == null)
        {

            $this->Flash->error(__('Error al agregar el Producto. Intenta nuevamente'));
            $this->redirect($this->request->referer());

        } else {

            $producto = $this->_getNameProductById($idproducto);
            $productos_compras = $this->ProductosComprasstock->newEmptyEntity();

            if ($this->request->is('post'))
            {

                $productos_compras = $this->ProductosComprasstock->patchEntity($productos_compras, $this->request->getData());

                $productos_compras->productos_idproductos = $idproducto;
                $productos_compras->comprasstock_idcomprasstock = $id_compras_stock;
                //$productos_compras->cantidad_pedido = $productos_compras->cantidad;

                //debug($productos_compras);
                if($this->ProductosComprasstock->save($productos_compras)){

                    $this->Flash->success(__('El Producto se ha agregado correctamente'));
                    return $this->redirect(['controller' => 'ComprasStock', 'action' => 'addProductoIndex', $id_compras_stock]);
                }

            }


            $this->set(compact('id_compras_stock'));
            $this->set(compact('producto'));
            $this->set(compact('productos_compras'));

        }

    }


    public function edit($id_compras_stock = null, $idproducto = null, $idproductos_comprasstock = null)
    {

        if ($id_compras_stock == null or $idproducto == null)
        {

            $this->Flash->error(__('Error al agregar el Producto. Intenta nuevamente'));
            $this->redirect($this->request->referer());

        } else {

            try{

                $producto = $this->_getNameProductById($idproducto);

                $productos_compras = $this->ProductosComprasstock->get($idproductos_comprasstock);

                if ($this->request->is(['patch', 'post', 'put'])) {

                    $productos_compras = $this->ProductosComprasstock->patchEntity($productos_compras, $this->request->getData());


                    if($this->ProductosComprasstock->save($productos_compras)){

                        $this->Flash->success(__('El Producto se ha editado correctamente'));
                        return $this->redirect(['controller' => 'ComprasStock', 'action' => 'view', $id_compras_stock]);
                    }

                }

                $this->set(compact('id_compras_stock'));
                $this->set(compact('producto'));
                $this->set(compact('productos_compras'));

            } catch (InvalidPrimaryKeyException $e){
                $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));

            } catch (RecordNotFoundException $e){
                $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
            }
            catch (Exception $e){
                $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
            }


        }

    }


    private function _getNameProductById($id_producto = null)
    {

        try {

            $model_pedidos_productos = $this->getTableLocator()->get('Productos');

            $producto = $model_pedidos_productos->get($id_producto);

            return $producto->name . ' ' . $producto->content . ' ' . $producto->unidad . ' (' . $producto->name . ')';

        } catch (InvalidPrimaryKeyException $e) {
            //$this->redirect($this->request->referer());
            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));

        } catch (RecordNotFoundException $e) {
            //$this->redirect($this->request->referer());
            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
        } catch (Exception $e) {
            //debug($e);
            //$this->redirect($this->request->referer());
            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
        }



        return false;

    }



    public function updateCompraToOk($idproductos_comprasstock = null, $id_empleado_compra = null, $cantidad = null, $precio = null, $descuento = null, $is_ok = false)
    {

        //Cargo los atributos
        try {

            $model_empleado_compras = $this->getTableLocator()->get('EmpleadoComprasstock');
            $empl_compra = null;

            $empl_compra = $id_empleado_compra != null ? $model_empleado_compras->get($id_empleado_compra) : null;
            //debug($idproductos_comprasstock);

            $produ_stock = $this->ProductosComprasstock->get($idproductos_comprasstock);

            if ($is_ok){
                $produ_stock->cantidad = $cantidad;
                $produ_stock->precio_unidad = $precio;
                $produ_stock->descuento_unidad = $descuento;
                $produ_stock->comprobante = $empl_compra->comprobante;
                $produ_stock->observaciones = $empl_compra->observaciones;
                $produ_stock->status = 1;
            } else {

                $produ_stock->cantidad = null;
                $produ_stock->precio_unidad = null;
                $produ_stock->descuento_unidad = null;
                $produ_stock->comprobante = null;
                $produ_stock->observaciones = null;
                $produ_stock->status = 0;
            }




            if($this->ProductosComprasstock->save($produ_stock)){


                return true;
            }

            return false;

        } catch (InvalidPrimaryKeyException $e) {
            debug($e);
            //$this->redirect($this->request->referer());
           // $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
            return false;

        } catch (RecordNotFoundException $e) {
            debug($e);
            //$this->redirect($this->request->referer());
            //$this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
            return false;
        } catch (Exception $e) {
            debug($e);
            //$this->redirect($this->request->referer());
            //$this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
            return false;
        }


    }

    public function setStockState($idproductos_comprasstock = null)
    {

        $this->autoRender = false;
        try {

            //uso la conecccion para guardar todos los cambios


            $produ_stock = $this->ProductosComprasstock->get($idproductos_comprasstock);

            $produ_stock->is_stock = 1;
            //debug($produ_stock);

            //actualizo el stock

            if ($this->ProductosComprasstock->save($produ_stock))
            {

                //Cargo en stock events LE PASO EL ID DEL PRODUCTO
                $stock_prod_controller = new StockProductosController();
                if ($stock_prod_controller->updateStockByCompra($produ_stock))
                {
                    return true;
                }
                return false;

            }
            return false;


        } catch (InvalidPrimaryKeyException $e) {
            //$this->redirect($this->request->referer());
            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));

        } catch (RecordNotFoundException $e) {
            //$this->redirect($this->request->referer());
            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
        } catch (Exception $e) {
            //debug($e);
            //$this->redirect($this->request->referer());
            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
        }

    }

    public function unsetStockState($idproductos_comprasstock = null)
    {
        $this->autoRender = false;
        try {

            $produ_stock = $this->ProductosComprasstock->get($idproductos_comprasstock);
            //seteo el producto en compra stock a false para que aparezca nuevamente la opcion de stockear
            $produ_stock->is_stock = 0;

            if ($this->ProductosComprasstock->save($produ_stock))
            {
                $stock_prod_controller = new StockProductosController();
                if ($stock_prod_controller->unStockProduct($produ_stock))
                {
                    return true;
                }
                return false;
            }
            return false;


        } catch (InvalidPrimaryKeyException $e) {
            //$this->redirect($this->request->referer());
            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));

        } catch (RecordNotFoundException $e) {
            //$this->redirect($this->request->referer());
            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
        } catch (Exception $e) {
            //debug($e);
            //$this->redirect($this->request->referer());
            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
        }
        return false;

    }


    public function delete($comprasstock_idcomprasstock = null, $idproductos_comprasstock = null)
    {
        //al eliminarlo, tengo que eliminar tmb de empleados
        $this->autoRender = false;
        $this->request->allowMethod(['post', 'delete']);

        try {
            //$conn = ConnectionManager::get('default');
            //$conn->begin();
            $prod_compras = $this->ProductosComprasstock->get($idproductos_comprasstock);

            if($this->ProductosComprasstock->delete($prod_compras)){

                $this->Flash->success(__('El Producto se ha eliminado correctamente'));
                return $this->redirect(['controller' => 'ComprasStock', 'action' => 'view', $comprasstock_idcomprasstock]);
            }

            $this->Flash->error(__('El Registro no pudo ser eliminado. Intente nuevamente.'));



        } catch (InvalidPrimaryKeyException $e){
            $this->Flash->error(__('El Registro no pudo ser eliminado. Intente nuevamente.'));

        } catch (RecordNotFoundException $e){
            $this->Flash->error(__('El Registro no pudo ser eliminado. Intente nuevamente.'));
        }
        catch (Exception $e){
            $this->Flash->error(__('El Registro no pudo ser eliminado. Intente nuevamente.'));
        }


    }

}
