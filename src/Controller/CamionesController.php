<?php
declare(strict_types=1);

namespace App\Controller;

use Cake\Datasource\Exception\InvalidPrimaryKeyException;
use Cake\Datasource\Exception\RecordNotFoundException;
use Cake\Event\EventInterface;

/**
 * Camiones Controller
 *
 * @property \App\Model\Table\CamionesTable $Camiones
 */
class CamionesController extends AppController
{

    public function beforeFilter(EventInterface $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub


        $user = $this->Authentication->getIdentity();
        if(isset($user) and $user->role === 'user')
        {
            if (!in_array($this->request->getParam('action'), [])) {
                //$this->redirect($this->request->referer());
                $this->Flash->error('Usted no esta autorizado para acceder al Sitio Solicitado');
                $this->redirect(['controller' => 'Index', 'action' => 'index']);
            }

        }
        $this->loadCartProduct();
    }


    public function index()
    {

        $camiones = $this->Camiones->find('all',[]);

        $this->set(compact('camiones'));



    }

    public function viewUser()
    {
        $user = $this->Authentication->getIdentity()->idusers;

        //tengo que traeer los camiones via campaign
        $campaign_model = $this->getTableLocator()->get('Campaign');

        $campaign = $campaign_model->find('all', [
            'contain' => ['StockCamionCampaign' => function($q) use ($user){

                return $q
                    ->contain(['Users', 'Camiones'])
                    ->where(['users_idusers' => $user]);
            }]
        ])->where(['status' => 1])
            ->last();


        $id_camion = isset($campaign->stock_camion_campaign[0]) ? $campaign->stock_camion_campaign[0]->camion_idcamion : false;
        $camiones = null;

        if($id_camion != false){

            try{

                $camiones = $this->Camiones->get($id_camion, [

                ]);


            } catch (InvalidPrimaryKeyException $e){
                $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));

            } catch (RecordNotFoundException $e){
                $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
            }
            catch (Exception $e){
                $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
            }


        }


        $this->set(compact('campaign'));
        $this->set(compact('camiones'));

    }


    public function add()
    {

        $camiones = $this->Camiones->newEmptyEntity();

        if($this->request->is('post'))
        {

            $camiones = $this->Camiones->patchEntity($camiones, $this->request->getData());

            if ($this->Camiones->save($camiones)){

                $this->Flash->success(__('El Camion se almaceno correctamente.'));

                return $this->redirect(['action' => 'index']);

            }

            $this->Flash->error(__('El Camion no se pudo guardar. Intente nuevamente.'));


        }

        $this->set(compact('camiones'));

    }



    public function getCamionesList($camion_list)
    {

        $camiones = $this->Camiones->find('list', [
            'keyField' => 'idcamiones',
            'valueField' => function($row){
                return $row['nombre'] . ' (' .$row['marca'] . ')';
            },
            'order' => ['nombre' => 'ASC']
        ])->where(['idcamiones NOT IN' => $camion_list]);

        return $camiones->toArray();


    }
}
