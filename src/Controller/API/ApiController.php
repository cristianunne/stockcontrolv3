<?php
declare(strict_types=1);

namespace App\Controller\API;

use App\Controller\AppController;
use App\Controller\StockCampaignProductoController;
use App\Controller\StockProductosController;
use App\Controller\UsersController;
use App\Controller\VentasController;
use App\Utility\PedidosStatusEnum;
use Cake\Auth\DefaultPasswordHasher;
use Cake\Datasource\ConnectionManager;
use Cake\Datasource\Exception\InvalidPrimaryKeyException;
use Cake\Datasource\Exception\RecordNotFoundException;
use Cake\Event\EventInterface;
use Cake\ORM\Query;
use Cake\Test\Fixture\ThingsFixture;

/**
 * Api Controller
 *
 */
class ApiController extends AppController
{

    public function beforeFilter(EventInterface $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub

        $this->Authentication->addUnauthenticatedActions(['index', 'getCompras', 'loginApp', 'setComprasEmpleado', 'addVenta', 'getCampaignUser',
            'getProductos', 'getCategories', 'getSubcategories', 'getProveedores', 'getClientes', 'getCamiones', 'getProductosForStock',
            'getAsignacionesProductosCamionesCampaign', 'addProductoToStockCamion', 'getProductosSolicitudesStock',
            'editProductosSolicitudesStock', 'deleteProductosSolicitudStock', 'getProductosStock', 'getCamionesWithoutCurrent',
            'uploadTransferProductoCamion', 'getProductosTransferenciasCamion', 'acceptTransfersCamion',
            'getProductosTransferenciasByCamion', 'deleteProductoTransferenciaCamion', 'getPedidosByUser']);


    }

    public function index()
    {
        debug($this->request->getParam('prefix'));
    }



    public function loginApp()
    {
        $data = $this->request->getData();
        $username = $data['username'];
        $password = $data['password'];

        $user_controller = new UsersController();
        $user = $user_controller->getUser($username, $password);

        $respuests = $user != null ? $user : null;

        return $this->json($user);
    }

    public function getCompras()
    {
        $data = $this->request->getData();
        $iduser = $data['idusers'];

        $model_compras = $this->getTableLocator()->get('ComprasStock');
        $compra = $model_compras->find('all', [
            'contain' => ['EmpleadoComprasstock']
        ])
        ->where(['users_comprador' => $iduser, 'assign' => 1, 'ComprasStock.status' => 1])->toArray();

        if(isset($compra)){
            return $this->json($compra);
        }

        return $this->json(false);


    }


    public function getProductosForStock()
    {
        $data = $this->request->getData();

        $idstock_camion_campaign = $data['idstockcc'];
        $id_campaign = $data['id_campaign'];

        $StockCampaignProducto_model = $this->getTableLocator()->get('StockCampaignProducto');


        $productos_camion = $StockCampaignProducto_model->find('all', [
            'fields' => ['productos_idproductos']
        ])->where(['stock_camion_campaign_idstock_camion_campaign' => $idstock_camion_campaign]);

        //traigo los productos
        $productos_model = $this->getTableLocator()->get('Productos');

        $productos = $productos_model->find('all', [
            'contain' => ['Categories', 'Subcategories', 'Proveedores', 'StockProductos' => function ($q) {
                return $q->where(['stock >' => '0']);
            }]
        ])
            ->where(['idproductos NOT IN' => $productos_camion])
            ->order(['idproductos' => 'ASC'])->toArray();

        $productos_ = [];
        foreach ($productos as $prod)
        {

            $prod['asignado'] = $this->_getAsignacionesProductosCamionesCampaign($id_campaign, $prod->idproductos);
            $productos_[] = $prod;
        }

        if(isset($productos_)){
            return $this->json($productos_);
        }

        return $this->json(false);

    }

    public function getProductosSolicitudesStock()
    {
        $data = $this->request->getData();

        $idstock_camion_campaign = $data['idstockcc'];
        $id_campaign = $data['id_campaign'];

        $StockCampaignProducto_model = $this->getTableLocator()->get('StockCampaignProducto');


        $productos_camion = $StockCampaignProducto_model->find('all', [
            'fields' => ['productos_idproductos']
        ])->where(['stock_camion_campaign_idstock_camion_campaign' => $idstock_camion_campaign]);


        //traigo los productos
        $productos_model = $this->getTableLocator()->get('Productos');

        $productos = $productos_model->find('all', [
            'contain' => ['StockProductos',
                'StockCampaignProducto' => function ($q) use ($idstock_camion_campaign) {
                    return $q->where(['stock_camion_campaign_idstock_camion_campaign' => $idstock_camion_campaign]);
                }, 'Categories', 'Subcategories', 'Proveedores' ]
        ])
            ->where(['idproductos IN' => $productos_camion, 'status' => 0])
            ->order(['idproductos' => 'ASC'])->toArray();




        $productos_ = [];
        foreach ($productos as $prod)
        {

            $prod['asignado'] = $this->_getAsignacionesProductosCamionesCampaign($id_campaign, $prod->idproductos);
            $productos_[] = $prod;
        }

        if(isset($productos_)){
            return $this->json($productos_);
        }

        return $this->json(false);
    }

    public function getProductosStock()
    {
        $data = $this->request->getData();

        $idstock_camion_campaign = $data['idstockcc'];
        $id_campaign = $data['id_campaign'];

        $StockCampaignProducto_model = $this->getTableLocator()->get('StockCampaignProducto');


        $productos_camion = $StockCampaignProducto_model->find('all', [
            'fields' => ['productos_idproductos']
        ])->where(['stock_camion_campaign_idstock_camion_campaign' => $idstock_camion_campaign]);


        //traigo los productos
        $productos_model = $this->getTableLocator()->get('Productos');

        $productos = $productos_model->find('all', [
            'contain' => ['StockProductos',
                'StockCampaignProducto' => function ($q) use ($idstock_camion_campaign) {
                    return $q->where(['stock_camion_campaign_idstock_camion_campaign' => $idstock_camion_campaign, 'status' => 1]);
                }, 'Categories', 'Subcategories', 'Proveedores' ]
        ])
            ->where(['idproductos IN' => $productos_camion])
            ->order(['idproductos' => 'ASC'])->toArray();




        $productos_ = [];
        foreach ($productos as $prod)
        {

            $prod['asignado'] = $this->_getAsignacionesProductosCamionesCampaign($id_campaign, $prod->idproductos);
            $productos_[] = $prod;
        }

        if(isset($productos_)){
            return $this->json($productos_);
        }

        return $this->json(false);
    }
    public function editProductosSolicitudesStock()
    {
        $data = $this->request->getData();

        $idstock_campaign_producto = $data['idstock_campaign_producto'];
        $cantidad = $data['cantidad'];

        $StockCampaignProducto_model = $this->getTableLocator()->get('StockCampaignProducto');

        try{

            $stock_camion_prod = $StockCampaignProducto_model->get($idstock_campaign_producto);

            $stock_camion_prod->cantidad_initial = $cantidad;
            $stock_camion_prod->cantidad = $cantidad;

            if($StockCampaignProducto_model->save($stock_camion_prod)){
                return $this->json(true);
            }
            return $this->json(false);



        } catch (InvalidPrimaryKeyException $e){
            return $this->json(false);

        } catch (RecordNotFoundException $e){
            return $this->json(false);
        }
        catch (Exception $e){
            return $this->json(false);
        }

        return $this->json(false);

    }

    public function deleteProductosSolicitudStock()
    {
        $data = $this->request->getData();

        $idstock_campaign_producto = $data['idstock_campaign_producto'];

        try{
            $StockCampaignProducto_model = $this->getTableLocator()->get('StockCampaignProducto');
            $stock_camion_prod = $StockCampaignProducto_model->get($idstock_campaign_producto);

            if($StockCampaignProducto_model->delete($stock_camion_prod)){
                return $this->json(true);
            }
            return $this->json(false);



        } catch (InvalidPrimaryKeyException $e){
            return $this->json(false);

        } catch (RecordNotFoundException $e){
            return $this->json(false);
        }
        catch (Exception $e){
            return $this->json(false);
        }

        return $this->json(false);
    }
    private function _getAsignacionesProductosCamionesCampaign($id_campaign, $id_producto)
    {
        $model_stock_camion_campaign = $this->getTableLocator()->get('StockCamionCampaign');

        $stock_camion_camp = $model_stock_camion_campaign->find('all', [
            'contain' => ['StockCampaignProducto' => function($q) use ($id_producto){

                return $q->where(['productos_idproductos' => $id_producto, 'status' => 1]);
            }]
        ])
            ->where(['campaign_idcampaign' => $id_campaign]);

        $cantidad = 0;

        //recorro conun foreach y sumo los productos
        foreach ($stock_camion_camp as $stock)
        {
            if($stock->stock_campaign_producto != null){

                foreach ($stock->stock_campaign_producto as $producto)
                {
                    $cantidad = $cantidad + $producto->cantidad;
                }

            }
        }

        return $cantidad;
    }

    public function getAsignacionesProductosCamionesCampaign()
    {
        $data = $this->request->getData();

        $idcampaign = $data['idcampaign'];

        $model_stock_camion_campaign = $this->getTableLocator()->get('StockCamionCampaign');

        $stock_camion_camp = $model_stock_camion_campaign->find('all', [
            'contain' => ['StockCampaignProducto']])
            ->where(['campaign_idcampaign' => $idcampaign]);



        return $this->json($stock_camion_camp->toArray());

    }


    public function addProductoToStockCamion()
    {
        $data = $this->request->getData();

        $idproducto = $data['idproducto'];
        $idstockcamioncampaign = $data['idstockcamioncampaign'];
        $cantidad = $data['cantidad'];


        $stock_campaign_producto_model = $this->getTableLocator()->get('StockCampaignProducto');

        $stock_camp_prod_entity = $stock_campaign_producto_model->newEmptyEntity();

        $stock_camp_prod_entity->stock_camion_campaign_idstock_camion_campaign = $idstockcamioncampaign;
        $stock_camp_prod_entity->productos_idproductos = $idproducto;
        $stock_camp_prod_entity->cantidad = $cantidad;
        $stock_camp_prod_entity->cantidad_initial = $cantidad;

        if($stock_campaign_producto_model->save($stock_camp_prod_entity)){
            return $this->json(true);
        }
        return $this->json(false);


    }

    public function setComprasEmpleado()
    {
        $this->autoRender = false;

        try{
            //DEbo actualizar la tabla EMPLEADOS_COMPRAS_STOCK
            $data = $this->request->getData();
            $idcomprasstock = $data['idcomprasstock'];
            $idproductos = $data['idproductos'];
            $cantidad = $data['cantidad'];
            $idusers = $data['idusers'];

            $model_empl_compra_stock = $this->getTableLocator()->get('EmpleadoComprasstock');
            $empl_compra_stock = $model_empl_compra_stock->find('all', [])
                ->where(['comprasstock_idcomprasstock' => $idcomprasstock, 'productos_idproductos' => $idproductos, 'users_idusers' => $idusers])->first();
            //debug($empl_compra_stock->toArray());

            $conn = ConnectionManager::get('default');
            $conn->begin();

            $model_compra_stock = $this->getTableLocator()->get('ComprasStock');
            $compra_Stock = $model_compra_stock->get($idcomprasstock);
            $compra_Stock->has_sent = 1;


            if($empl_compra_stock != null){
                $empl_compra_stock->cantidad_comprada = $cantidad;
                $empl_compra_stock->status = 1;
                //cambiar el estado de la compra a 1
                if ($model_empl_compra_stock->save($empl_compra_stock)){

                    if($model_compra_stock->save($compra_Stock)){
                        $conn->commit();
                        return $this->json(false);
                    }
                }
            }
            $conn->rollback();
            return $this->json([false]);

        } catch (InvalidPrimaryKeyException $e){
            return $this->json(false);

        } catch (RecordNotFoundException $e){
            return $this->json(false);
        }
        catch (Exception $e){
            return $this->json(false);
        }


        return $this->json(false);
    }

    public function addVenta()
    {
        $this->autoRender = false;
        //DEbo actualizar la tabla EMPLEADOS_COMPRAS_STOCK
        $data = $this->request->getData();

        $array = [
            'users_idusers' => $this->request->getData('users_idusers'),
            'clientes_idclientes' => $this->request->getData('clientes_idclientes'),
            'subtotal' => $this->request->getData('subtotal'),
            'descuentos' => $this->request->getData('descuentos'),
            'total' => $this->request->getData('total'),
            'descuento_general' => $this->request->getData('descuento_general'),
            'coordenadas' => $this->request->getData('coordenadas'),
            'campaign_idcampaign' => $this->request->getData('campaign_idcampaign'),
            'cuenta_corriente' => $this->request->getData('cuenta_corriente'),
            'is_pay' => $this->request->getData('is_pay'),
            'camion_idcamion' => $this->request->getData('camion_idcamion'),
            'hash' => hash('sha256' , ('hash' . date("Y-m-d"))),
            'number' =>  $this->_getMaxNumberPedido() == null ? 1 : ($this->_getMaxNumberPedido() + 1),
            'pedidos_idpedidos' => $this->request->getData('pedidos_idpedidos'),

        ];


        //return $this->json($array);
        $productos_ = $this->request->getData('productos');
        //$prod_array = json_decode($productos_[0]);
        //return $this->json($productos_[0]['descuento_unidad']);
        $array['productos_ventas'] = $this->request->getData('productos');

        //utilizo un try

        try{

            $pedidos_idpedidos = $this->request->getData('pedidos_idpedidos');
            //traigo el model pedidos
            $pedidos_model = $this->getTableLocator()->get('Pedidos');

            $pedido = $pedidos_model->get($pedidos_idpedidos);



            $stock_camp_prod_controller = new StockCampaignProductoController();
            $result_stock_camion = false;

            $conn = ConnectionManager::get('default');
            $conn->begin();
            $productos_id_array = [];

            //tengo que modificar el stock del camion stock y del stock general
            foreach ($productos_ as $prod)
            {

                $productos_id_array[] = $prod['productos_idproductos'];
                //return $this->json($prod['idstock_campaign_producto']);
                $resultado = $stock_camp_prod_controller->updateStockCamionById($prod['idstock_campaign_producto'], $prod['cantidad']);

                if (!$resultado)
                {
                    $result_stock_camion = false;
                    break;
                }
                $result_stock_camion = true;

                //actualizo el stock general
                //$stock = $this->_getStockGeneralByProducto( $prod['productos_idproductos']);
            }

            if($result_stock_camion){


                $stock_controller = new StockProductosController();
                if ($stock_controller->updateStockByVenta($productos_id_array, $array))
                {
                    $model_ventas = $this->getTableLocator()->get('Ventas');
                    $venta_entity = $model_ventas->newEmptyEntity();
                    $venta_entity = $model_ventas->patchEntity($venta_entity, $array);

                    /*$conn->rollback();
                    return $this->json(['mensaje' => $venta_entity->getErrors()]);*/

                    if($result_stock_camion){

                        if($model_ventas->save($venta_entity)){

                            $pedido->status_val = 1;
                            $pedido->status = PedidosStatusEnum::COMPLETED;

                            /*$conn->commit();
                            return $this->json($venta_entity->idventas);*/

                            //actualizo el pedido
                            if($pedidos_model->save($pedido)){
                                $conn->commit();
                                return $this->json($venta_entity->idventas);
                            }
                        } else {
                            $conn->rollback();
                            return $this->json($venta_entity->getErrors());
                        }
                    } else {
                        $conn->rollback();
                        return $this->json(false);
                    }
                } else {
                    $conn->rollback();
                    return $this->json(false);
                }

            }

            $conn->rollback();
            return $this->json(false);


        }  catch (InvalidPrimaryKeyException $e){
            return $this->json([$e]);

        } catch (RecordNotFoundException $e){
            return $this->json([$e]);
        }
        catch (Exception $e){
            return $this->json([$e]);
        }
    }

    private function _getStockGeneralByProducto($id_producto = null)
    {
        $stock_controller = new StockProductosController();

        return $stock_controller->getStockByProducto($id_producto);

    }


    public function getCamiones()
    {
        $this->autoRender = false;

        $camiones_model = $this->getTableLocator()->get('Camiones');

        $camiones = $camiones_model->find('all', [])
            ->toArray();

        if(isset($camiones)){
            return $this->json($camiones);
        }
        return $this->json(false);

    }

    public function getCamionesWithoutCurrent()
    {
        $this->autoRender = false;
        //$data = $this->request->getData();
        $idcamion = $this->request->getData('idcamion');

        $camiones_model = $this->getTableLocator()->get('Camiones');

        $camiones = $camiones_model->find('all', [])
            ->where(['idcamiones != ' => $idcamion])
            ->toArray();

        if(isset($camiones)){
            return $this->json($camiones);
        }
        return $this->json(false);
    }


    public function getCampaignUser()
    {
        $this->autoRender = false;
        //$data = $this->request->getData();
        $user_id = $this->request->getData('user_id');
        //traigo la campaign anexado con camion_user
        $model_campaign = $this->getTableLocator()->get('Campaign');

        $campaign = $model_campaign->find('all', [
            'contain' => ['StockCamionCampaign' => function ($q) use ($user_id) {
                return $q->where(['users_idusers' => $user_id]);
            }]
        ])->where(['status' => 1])->first();

        if(!isset($campaign)){
            return $this->json(false);
        } else {
            if($campaign->stock_camion_campaign == null){
                return $this->json(false);
            }
            return $this->json($campaign->toArray());
        }

    }

    public function getClientes()
    {
        $this->autoRender = false;

        $clientes_model = $this->getTableLocator()->get('Clientes');

        $clientes = $clientes_model->find('all', [])
            ->toArray();

        if(isset($clientes)){
            return $this->json($clientes);
        }
        return $this->json(false);

    }

    public function getProductos()
    {
        $this->autoRender = false;
        $productos_model = $this->getTableLocator()->get('Productos');

        $productos = $productos_model->find('all', [
            'contain' => ['Precios' => function ($q)  {
            return $q->where(['active' => 1]);
    }, 'Descuentos' => function ($q)  {
        return $q->where(['active' => 1]);
    }]
        ])
            ->toArray();

        if(isset($productos)){
            return $this->json($productos);
        }
        return $this->json(false);
    }

    public function getCategories()
    {
        $this->autoRender = false;

        $categories_model = $this->getTableLocator()->get('Categories');

        $categories = $categories_model->find('all', [])
            ->toArray();

        if(isset($categories)){
            return $this->json($categories);
        }
        return $this->json(false);
    }

    public function getSubcategories()
    {
        $this->autoRender = false;

        $categories_model = $this->getTableLocator()->get('Subcategories');

        $categories = $categories_model->find('all', [])
            ->toArray();

        if(isset($categories)){
            return $this->json($categories);
        }
        return $this->json(false);
    }


    public function getProveedores()
    {
        $this->autoRender = false;

        $proveedores_model = $this->getTableLocator()->get('Proveedores');

        $proveedores = $proveedores_model->find('all', [])->toArray();

        if(isset($proveedores)){
            return $this->json($proveedores);
        }
        return $this->json(false);
    }


    public function uploadTransferProductoCamion()
    {
        $this->autoRender = false;
        try {
            //$data = $this->request->getData();
            $idcampaign = $this->request->getData('idcampaign');
            $camion_origen = $this->request->getData('camion_origen');
            $camion_destino = $this->request->getData('camion_destino');
            $idstock_campaign_producto = $this->request->getData('idstock_campaign_producto');
            $idstock_camion_campaign = $this->request->getData('idstock_camion_campaign');
            $productos_idproductos = $this->request->getData('productos_idproductos');
            $cantidad = $this->request->getData('cantidad');
            //traigo la campaign anexado con camion_user
            $model_TransferenciaStock = $this->getTableLocator()->get('TransferenciaStock');
            $model_stock_campaign_producto = $this->getTableLocator()->get('StockCampaignProducto');

            $tranfer_entity = $model_TransferenciaStock->newEmptyEntity();
            $tranfer_entity->idcampaign = $idcampaign;
            $tranfer_entity->camion_origen = $camion_origen;
            $tranfer_entity->camion_destino = $camion_destino;
            $tranfer_entity->idstock_campaign_producto = $idstock_campaign_producto;
            $tranfer_entity->idstock_camion_campaign = $idstock_camion_campaign;
            $tranfer_entity->productos_idproductos = $productos_idproductos;
            $tranfer_entity->cantidad = $cantidad;

            //traigo el sotck producto
            $stock_producto = $model_stock_campaign_producto->get($idstock_campaign_producto);

            $conn = ConnectionManager::get('default');
            $conn->begin();


            if ($model_TransferenciaStock->save($tranfer_entity)) {

                //tengo que descontar la cantidad del stock
                $stock_producto->cantidad = $stock_producto->cantidad - $cantidad;
                $stock_producto->cant_transfer = $stock_producto->cant_transfer + $cantidad;

                if($model_stock_campaign_producto->save($stock_producto)){
                    $conn->commit();
                    return $this->json(true);
                }
                $conn->rollback();

            }
            $conn->rollback();
            return $this->json(false);
        }  catch (InvalidPrimaryKeyException $e){
            return $this->json(false);

        } catch (RecordNotFoundException $e){
            return $this->json(false);
        }
        catch (Exception $e){
            return $this->json(false);
        }

        return $this->json(false);
    }

    public function acceptTransfersCamion()
    {
        $this->autoRender = false;


        try {

            $idtransferencia_stock = $this->request->getData('idtransferencia_stock');
            $idstock_campaign_producto = $this->request->getData('idstock_campaign_producto');
            $cantidad = $this->request->getData('cantidad');
            $idcamion = $this->request->getData('idcamion');
            $idcampaign = $this->request->getData('idcampaign');
            $productos_idproductos = $this->request->getData('productos_idproductos');

            $model_stock_camion_campaign = $this->getTableLocator()->get('StockCamionCampaign');
            $model_stock_campaign_producto = $this->getTableLocator()->get('StockCampaignProducto');
            $model_transferencias = $this->getTableLocator()->get('TransferenciaStock');

            $tranferencia = $model_transferencias->get($idtransferencia_stock);
            //$stock_campaign_producto = $model_stock_campaign_producto->get($idstock_campaign_producto);

            //tengo que cambiar a true la transferencia y tmb tengo que sumar al sotck del camion
            $tranferencia->status = 1;
            $tranferencia->cantidad = $cantidad;

            //necesito actualizar el stock del camion
            $stock_camion_campaign = $model_stock_camion_campaign->find('all', [
                'contain' => ['StockCampaignProducto' => function($q) use ($productos_idproductos) {
                    return $q->where(['productos_idproductos' => $productos_idproductos]);
                }]
            ])->where(['campaign_idcampaign' => $idcampaign, 'camion_idcamion' => $idcamion])->first();
            //cuento el array
            if(count($stock_camion_campaign->stock_campaign_producto) > 0){
                //el producto existe, entonces actualizo
                $stock_camp_prod_camion_dest = $model_stock_campaign_producto->get($stock_camion_campaign->stock_campaign_producto[0]->idstock_campaign_producto);
                $stock_camp_prod_camion_dest->cantidad = $stock_camp_prod_camion_dest->cantidad + $cantidad;

                if($model_stock_campaign_producto->save($stock_camp_prod_camion_dest)){

                    //cambio la transferencia
                    if($model_transferencias->save($tranferencia)){
                        return $this->json($stock_camp_prod_camion_dest);
                    }

                }
                return $this->json(false);


            } else {
                //el producto no existe en stock, lo reo y lo apruebo
                $stock_camp_prod_camion_dest = $model_stock_campaign_producto->newEmptyEntity();
                $stock_camp_prod_camion_dest->stock_camion_campaign_idstock_camion_campaign = $stock_camion_campaign->idstock_camion_campaign;
                $stock_camp_prod_camion_dest->productos_idproductos = $productos_idproductos;
                $stock_camp_prod_camion_dest->cantidad = $cantidad;
                $stock_camp_prod_camion_dest->cantidad_initial = $cantidad;
                $stock_camp_prod_camion_dest->status = 1;

                if($model_stock_campaign_producto->save($stock_camp_prod_camion_dest)){

                    if($model_transferencias->save($tranferencia)){
                        return $this->json(true);
                    }

                }

            }


            return $this->json($stock_camion_campaign);


            //$stock_campaign_producto->cantidad = $stock_campaign_producto->cantidad + $cantidad;



        }  catch (InvalidPrimaryKeyException $e){
            //debug($e);
            return $this->json(false);

        } catch (RecordNotFoundException $e){
            //debug($e);
            return $this->json(false);
        }
        catch (Exception $e){
           // debug($e);
            return $this->json(false);
        }

    }

    public function getProductosTransferenciasCamion()
    {
        $this->autoRender = false;
        $idcampaign = $this->request->getData('idcampaign');
        $camion_destino = $this->request->getData('camion_destino');

        $TransferenciaStock_model = $this->getTableLocator()->get('TransferenciaStock');

        $productos = $TransferenciaStock_model->find('all', [
            'contain' => ['Productos', 'CamionesOrigen']
        ])
            ->where(['idcampaign' => $idcampaign, 'camion_destino' => $camion_destino, 'status' => 0])
            ->toArray();

        if(isset($productos)){
            return $this->json($productos);
        }
        return $this->json(false);


    }

    public function getProductosTransferenciasByCamion()
    {
        $this->autoRender = false;
        $idcampaign = $this->request->getData('idcampaign');
        $camion_origen = $this->request->getData('camion_origen');

        $TransferenciaStock_model = $this->getTableLocator()->get('TransferenciaStock');

        $productos = $TransferenciaStock_model->find('all', [
            'contain' => ['Productos', 'CamionesOrigen']
        ])
            ->where(['idcampaign' => $idcampaign, 'camion_origen' => $camion_origen]);

        if(isset($productos)){
            return $this->json($productos);
        }
        return $this->json(false);
    }

    public function deleteProductoTransferenciaCamion()
    {
        $this->autoRender = false;

        $idtransferencia_stock = $this->request->getData('idtransferencia_stock');
        $idstock_campaign_producto = $this->request->getData('idstock_campaign_producto');

        //con el di stock, busco ese stock y repongo la cantidad del producto y elimino la cantidad en transferencia
        try{

            $stock_campaign_producto_model = $this->getTableLocator()->get('StockCampaignProducto');
            $transferencias_model = $this->getTableLocator()->get('TransferenciaStock');

            $stock_camp_prod = $stock_campaign_producto_model->get($idstock_campaign_producto);
            $transferencia = $transferencias_model->get($idtransferencia_stock);

            $conn = ConnectionManager::get('default');
            $conn->begin();

            //sumo a la cantidad del stock, la cantidad transferida
            $stock_camp_prod->cantidad = $stock_camp_prod->cantidad + $transferencia->cantidad;
            $stock_camp_prod->cant_transfer = $stock_camp_prod->cant_transfer - $transferencia->cantidad;

            if($stock_campaign_producto_model->save($stock_camp_prod)){

                if($transferencias_model->delete($transferencia)){
                    $conn->commit();
                    return $this->json(true);
                }
                $conn->rollback();
            }
            $conn->rollback();
            return $this->json(false);



        } catch (InvalidPrimaryKeyException $e){

            return $this->json(false);

        } catch (RecordNotFoundException $e){

            return $this->json(false);
        }
        catch (Exception $e){

            return $this->json(false);
        }

        return $this->json(false);


    }




    public function getPedidosByUser()
    {
        $this->autoRender = false;

        $idempleado = $this->request->getData('idempleado');

        $pedidos_model = $this->getTableLocator()->get('Pedidos');


        $pedidos = $pedidos_model->find('all', [
            'contain' => ['Productos']
        ])->where(['empleado_idempleado' => $idempleado, 'status_val' => 0]);

        if(isset($pedidos)){
            return $this->json($pedidos);
        }

        return $this->json(false);

    }


    private function _getMaxNumberPedido()
    {
        $model_pedidos = $this->getTableLocator()->get('Ventas');

        return $model_pedidos->find('GetMaxNumberPedidos', [])->first()->max;

    }


}
