<?php
declare(strict_types=1);

namespace App\Controller\API;

use App\Controller\AppController;
use App\Controller\UsersController;
use App\Controller\VentasController;
use Cake\Auth\DefaultPasswordHasher;
use Cake\Event\EventInterface;

/**
 * Api Controller
 *
 */
class ApiController extends AppController
{

    public function beforeFilter(EventInterface $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub

        $this->Authentication->addUnauthenticatedActions(['index', 'getCompras', 'loginApp', 'setCompras', 'addVenta', 'getCampaignUser',
            'getProductos', 'getCategories', 'getSubcategories', 'getProveedores']);


    }

    public function index()
    {
        debug($this->request->getParam('prefix'));
    }



    public function loginApp()
    {
        $data = $this->request->getData();
        $username = $data['username'];
        $password = $data['password'];

        $user_controller = new UsersController();
        $user = $user_controller->getUser($username, $password);

        $respuests = $user != null ? $user : null;

        return $this->json($user);
    }

    public function getCompras()
    {
        $data = $this->request->getData();
        $iduser = $data['idusers'];

        $model_compras = $this->getTableLocator()->get('ComprasStock');
        $compra = $model_compras->find('all', [
            'contain' => ['EmpleadoComprasstock']
        ])
        ->where(['users_comprador' => $iduser, 'assign' => 1, 'status' => 1])->toArray();

        if(isset($compra)){
            return $this->json($compra);
        }

        return $this->json(false);


    }

    public function setCompras()
    {
        $this->autoRender = false;
        //DEbo actualizar la tabla EMPLEADOS_COMPRAS_STOCK
        $data = $this->request->getData();
        $idcomprasstock = $data['idcomprasstock'];
        $idproductos = $data['idproductos'];
        $cantidad = $data['cantidad'];
        $idusers = $data['idusers'];

        $model_empl_compra_stock = $this->getTableLocator()->get('EmpleadoComprasstock');
        $empl_compra_stock = $model_empl_compra_stock->find('all', [])
        ->where(['comprasstock_idcomprasstock' => $idcomprasstock, 'productos_idproductos' => $idproductos, 'users_idusers' => $idusers])->first();
        //debug($empl_compra_stock->toArray());



        /*$emp_comp_entity = $model_empl_compra_stock->newEmptyEntity();
        $emp_comp_entity->cantidad = $cantidad;
        $emp_comp_entity->comprasstock_idcomprasstock = $idcomprasstock;
        $emp_comp_entity->productos_idproductos = $idproductos;
        $emp_comp_entity->users_idusers = $idusers;*/

        if($empl_compra_stock != null){
            $empl_compra_stock->cantidad = $cantidad;
            $empl_compra_stock->status = 1;

            if ($model_empl_compra_stock->save($empl_compra_stock)){
                return $this->json(true);
            }
        }
        return $this->json(false);
    }

    public function addVenta()
    {
        $this->autoRender = false;
        //DEbo actualizar la tabla EMPLEADOS_COMPRAS_STOCK
        $data = $this->request->getData();

        $array = [
            'users_idusers' => $data['users_idusers'],
            'clientes_idclientes' => $data['id_cliente'],
            'subtotal' => $data['subtotal'],
            'descuentos' => $data['descuentos'],
            'total' => $data['total'],
            'descuento_general' => $data['descuento_general'],
            'campaign_idcampaign' => $data['campaign_idcampaign'],
            'hash' => hash('sha256' , ('hash' . date("Y-m-d"))),
            'number' =>  $this->_getMaxNumberPedido() == null ? 1 : ($this->_getMaxNumberPedido() + 1)
        ];

        $array['productos_ventas'] = [];

        //actualizo el stock del camion primero



        $model_ventas = $this->getTableLocator()->get('Ventas');
        $venta_entity = $model_ventas->newEmptyEntity();
        $venta_entity = $model_ventas->patchEntity($venta_entity, $array);

        if($model_ventas->save($venta_entity)){
            return $this->json(true);
        }

        return $this->json(false);
    }



    public function getCampaignUser()
    {
        $this->autoRender = false;
        //$data = $this->request->getData();
        $user_id = $this->request->getData('user_id');
        //traigo la campaign anexado con camion_user
        $model_campaign = $this->getTableLocator()->get('Campaign');

        $campaign = $model_campaign->find('all', [
            'contain' => ['StockCamionCampaign' => function ($q) use ($user_id) {
                return $q->where(['users_idusers' => $user_id]);
            }]
        ])->where(['status' => 1])->first();

        if(!isset($campaign)){
            return $this->json(false);
        } else {
            if($campaign->stock_camion_campaign == null){
                return $this->json(false);
            }
            return $this->json($campaign->toArray());
        }

    }

    public function getProductos()
    {
        $this->autoRender = false;
        $productos_model = $this->getTableLocator()->get('Productos');

        $productos = $productos_model->find('all', [])
            ->toArray();

        if(isset($productos)){
            return $this->json($productos);
        }
        return $this->json(false);
    }

    public function getCategories()
    {
        $this->autoRender = false;

        $categories_model = $this->getTableLocator()->get('Categories');

        $categories = $categories_model->find('all', [])
            ->toArray();

        if(isset($categories)){
            return $this->json($categories);
        }
        return $this->json(false);
    }

    public function getSubcategories()
    {
        $this->autoRender = false;

        $categories_model = $this->getTableLocator()->get('Subcategories');

        $categories = $categories_model->find('all', [])
            ->toArray();

        if(isset($categories)){
            return $this->json($categories);
        }
        return $this->json(false);
    }


    public function getProveedores()
    {
        $this->autoRender = false;

        $proveedores_model = $this->getTableLocator()->get('Proveedores');

        $proveedores = $proveedores_model->find('all', [])->toArray();

        if(isset($proveedores)){
            return $this->json($proveedores);
        }
        return $this->json(false);
    }

    private function _getMaxNumberPedido()
    {
        $model_pedidos = $this->getTableLocator()->get('Ventas');

        return $model_pedidos->find('GetMaxNumberPedidos', [])->first()->max;

    }


}
