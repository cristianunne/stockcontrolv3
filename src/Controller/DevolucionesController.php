<?php
declare(strict_types=1);

namespace App\Controller;

use Cake\Datasource\ConnectionManager;
use Cake\Datasource\Exception\InvalidPrimaryKeyException;
use Cake\Datasource\Exception\RecordNotFoundException;
use Cake\Event\EventInterface;

/**
 * Devoluciones Controller
 *
 * @property \App\Model\Table\DevolucionesTable $Devoluciones
 */
class DevolucionesController extends AppController
{

    public function beforeFilter(EventInterface $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub


        $user = $this->Authentication->getIdentity();
        if(isset($user) and $user->role === 'empleado')
        {
            if (!in_array($this->request->getParam('action'), ['index', 'add', 'viewProducts'])) {
                //$this->redirect($this->request->referer());
                $this->Flash->error('Usted no esta autorizado para acceder al Sitio Solicitado');
                $this->redirect(['controller' => 'Index', 'action' => 'index']);
            }

        }
        $this->loadCartProduct();
    }

    public function add($id_productos_ventas = null)
    {

        try{
            $devoluciones = $this->Devoluciones->newEmptyEntity();

            $model_productos_ventas = $this->getTableLocator()->get('ProductosVentas');
            $productos_ventas = $model_productos_ventas->get($id_productos_ventas, [
            ]);

            //debug($productos_ventas);

            $producto_detalles = $this->_getProductoById($productos_ventas->productos_idproductos);

            //debug($producto_detalles);
            $producto = $this->_getProductosList($productos_ventas->productos_idproductos);

            if ($this->request->is('post')){
                $cantidad = $this->request->getData('cantidad');
                if($cantidad == 0){
                    $this->Flash->error('La Cantidad debe ser mayor a 0 (Cero)');
                } else {

                    //compruebo que la cantidad no sea mayor a la disponible
                    $cantidad = $this->request->getData('cantidad');
                    $is_stock = $this->request->getData('to_stock');


                    if($cantidad > $productos_ventas->cantidad){
                        $this->Flash->error(__('La cantidad ingresa supera la cantidad en venta.'));
                    } else {
                        $conn = ConnectionManager::get('default');
                        $conn->begin();

                        $devoluciones = $this->Devoluciones->patchEntity($devoluciones, $this->request->getData());
                        $devoluciones->precio_unidad = $productos_ventas->precio_unidad;
                        $devoluciones->descuento_unidad = $productos_ventas->descuento_unidad;
                        $devoluciones->ventas_idventas = $productos_ventas->ventas_idventas;
                        $devoluciones->users_idusers = $this->Authentication->getIdentity()->idusers;

                        $ventas_controller = new VentasController();
                        if ($ventas_controller->modifiedByDevolucion($devoluciones->ventas_idventas, $devoluciones->productos_idproductos, $cantidad))
                        {
                            //si esta ok agrego a las devoluciones
                            if($this->Devoluciones->save($devoluciones)){

                                if($is_stock){
                                    $stock_controller = new StockProductosController();
                                    $stock_controller->updateStockByDevolucion($productos_ventas->productos_idproductos, $cantidad);


                                }


                                $this->Flash->success(__('Se ha concretado la Devolución correctamente.'));

                                //$conn->commit();
                            } else {
                                $this->Flash->error(__('La devolución no pudo realizarse. Intente nuevamente.'));
                            }

                        }
                        $conn->rollback();
                    }
                }
            }

        } catch (InvalidPrimaryKeyException $e){
            $this->Flash->error(__('La devolución no pudo realizarse. Intente nuevamente.'));

        } catch (RecordNotFoundException $e){
            $this->Flash->error(__('La devolución no pudo realizarse. Intente nuevamente.'));
        }
        catch (Exception $e){
            $this->Flash->error(__('La devolución no pudo realizarse. Intente nuevamente.'));
        }

        $this->set(compact('devoluciones'));
        $this->set(compact('producto'));
        $this->set(compact('productos_ventas'));
        $this->set(compact('producto_detalles'));
    }


    public function viewProducts($id_venta = null)
    {
        $user = $this->Authentication->getIdentity();

        $devolucion = $this->Devoluciones->newEmptyEntity();

        //traigo la lista de productos de la venta
        $ventas = $this->_getProductosByVenta($id_venta);



        //debug($productos_venta->toArray());
        $this->set(compact('ventas'));
        $this->set(compact('id_venta'));
        $this->set(compact('devolucion'));
    }

    private function _getProductosByVenta($idventa = null)
    {
        $model_ventas = $this->getTableLocator()->get('Ventas');
        $ventas = $model_ventas->get($idventa,[
            'contain' => ['Productos' => ['Categories', 'Subcategories'], 'Clientes', 'Users', 'Devoluciones']]);

        return $ventas;
    }


    private function _getProductosList($id_producto = null)
    {

        $model_productos = $this->getTableLocator()->get('Productos');
        $productos = $model_productos->find('list', [
            'keyField' => 'idproductos',
            'valueField' => function($row){
                return $row['name'] . ' (' . $row['marca'] . ')';
            },
            'order' => ['name' => 'ASC']
        ])
        ->where(['idproductos' => $id_producto]);

        return $productos->toArray();

    }

    private function _getDataFromProductoVenta($id_venta = null, $idproducto)
    {

        $model_productos_ventas = $this->getTableLocator()->get('ProductosVentas');
        $producto_venta = $model_productos_ventas->find('all', [])
            ->where(['ventas_idventas' => $id_venta, '']);
    }


    private function _getProductoById($id_producto = null)
    {
        $model_productos = $this->getTableLocator()->get('Productos');

        $producto = $model_productos->get($id_producto);

        return $producto;
    }
}
