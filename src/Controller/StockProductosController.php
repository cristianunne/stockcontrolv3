<?php
declare(strict_types=1);

namespace App\Controller;

use App\Utility\StockEventsEnum;
use Cake\Datasource\Exception\InvalidPrimaryKeyException;
use Cake\Datasource\Exception\RecordNotFoundException;
use Cake\Event\EventInterface;
use Exception;

/**
 * StockProductos Controller
 *
 * @property \App\Model\Table\StockProductosTable $StockProductos
 */
class StockProductosController extends AppController
{

    public function beforeFilter(EventInterface $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub


        $user = $this->Authentication->getIdentity();
        if(isset($user) and $user->role === 'user')
        {
            if (!in_array($this->request->getParam('action'), [])) {
                //$this->redirect($this->request->referer());
                $this->Flash->error('Usted no esta autorizado para acceder al Sitio Solicitado');
                $this->redirect(['controller' => 'Index', 'action' => 'index']);
            }

        }
        $this->loadCartProduct();
    }



    public function updateStockManual($id_producto = null)
    {



        $stock_producto =  $this->StockProductos->find('all', [])
            ->where(['productos_idproductos' => $id_producto]);

        if ($stock_producto->toArray() === null) {

            //si es menor tengo que crear el stock
            $stock_prod_entity = $this->StockProductos->newEmptyEntity();
            $stock_prod_entity->productos_idproductos = $id_producto;

            if($this->StockProductos->save($stock_prod_entity)) {

                return $this->redirect(['action' => 'updateStockManual', $id_producto]);

            }

        } else {
            $stock_prod_entity =  $this->StockProductos->get($stock_producto->toArray()[0]->idstock_productos, [
                'contain' => ['StockEvents']
            ]);

            $cantidad_ = $stock_prod_entity->stock;

            $this->set(compact('stock_prod_entity'));

            if ($this->request->is(['patch', 'post', 'put']))
            {
                try{

                    //creo una entidad vaica de stockevents
                    $model_stock_events = $this->getTableLocator()->get('StockEvents');
                    $stock_events_entity = $model_stock_events->newEmptyEntity();

                    $stock_events_entity->categoria = StockEventsEnum::MANUAL;
                    $stock_events_entity->cantidad = $stock_prod_entity->stock;
                    $stock_events_entity->observaciones = $this->request->getData()['observaciones'];

                    $stock_prod_entity->stock_events = [$stock_events_entity];

                    $stock_prod_entity = $this->StockProductos->patchEntity($stock_prod_entity, $this->request->getData(), [
                        'atomic'=>false,
                        'associated' => ['StockEvents' => ['validate' => false]]
                    ]);

                    $stock_prod_entity->stock = $stock_prod_entity->stock + $cantidad_;


                    if ($this->StockProductos->save($stock_prod_entity)) {
                            $this->Flash->success(__('La Categoria se almaceno correctamente.'));

                            return $this->redirect(['controller' => 'productos' ,'action' => 'viewConfig', $id_producto]);
                    }
                    $this->Flash->error(__('El Aca entro no se pudo guardar. Intente nuevamente.'));


                } catch (InvalidPrimaryKeyException $e){


                    $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));

                } catch (RecordNotFoundException $e){
                    $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
                }
                catch (Exception $e){

                    $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
                }

            }

        }
        $this->set(compact('id_producto'));
        $this->set(compact('stock_producto'));
    }

    public function updateStockByCompra($produ_stock = null)
    {
        //$produ_stock
        // $idproductos_comprasstock = null, $id_producto = null
        //debug($produ_stock);

        $stock_producto =  $this->StockProductos->find('all', [])
            ->where(['productos_idproductos' => $produ_stock->productos_idproductos]);
        //debug($stock_producto->toArray());

        if ($stock_producto->toArray() === null or $stock_producto->toArray() == []) {
            //si es menor tengo que crear el stock
            $stock_prod_entity = $this->StockProductos->newEmptyEntity();
            $stock_prod_entity->productos_idproductos = $produ_stock->productos_idproductos;


            if($this->StockProductos->save($stock_prod_entity)) {

                return $this->updateStockByCompra($produ_stock);

            }

        } else {

            try{
                $stock_prod_entity =  $this->StockProductos->get($stock_producto->toArray()[0]->idstock_productos, [
                    'contain' => ['StockEvents']
                ]);

                $cantidad_ = $stock_prod_entity->stock;

                //TRaigo el producto compra t

                //debug($produ_stock);
                //creo una entidad vaica de stockevents
                $model_stock_events = $this->getTableLocator()->get('StockEvents');
                $stock_events_entity = $model_stock_events->newEmptyEntity();

                $stock_events_entity->categoria = StockEventsEnum::COMPRAS;
                $stock_events_entity->cantidad = $produ_stock->cantidad;
                $stock_events_entity->observaciones = $produ_stock->observaciones;
                $stock_events_entity->comprasstock_id = $produ_stock->comprasstock_idcomprasstock;

                $stock_prod_entity->stock_events = [$stock_events_entity];

                $stock_prod_entity = $this->StockProductos->patchEntity($stock_prod_entity, $this->request->getData(), [
                    'atomic'=>false,
                    'associated' => ['StockEvents' => ['validate' => false]]
                ]);

                $stock_prod_entity->stock = $stock_prod_entity->stock + $produ_stock->cantidad;

                //debug($stock_prod_entity);


                if ($this->StockProductos->save($stock_prod_entity)) {
                   return true;
                }

                return false;

            } catch (InvalidPrimaryKeyException $e){


                return false;

            } catch (RecordNotFoundException $e){
                return false;
            }
            catch (Exception $e){

                return false;
            }


        }

    }

    public function unStockProduct($produ_stock = null)
    {
        try {

            $stock_producto =  $this->StockProductos->find('all', [])
                ->where(['productos_idproductos' => $produ_stock->productos_idproductos]);

            $stock_prod_entity = $this->StockProductos->get($stock_producto->toArray()[0]->idstock_productos, [
                'contain' => ['StockEvents']
            ]);

            $cantidad_ = $stock_prod_entity->stock;

            $stock_prod_entity->stock = $stock_prod_entity->stock - $produ_stock->cantidad;

            //tengo que restar la cantidad del producto y eliminar los events
            $model_stock_events = $this->getTableLocator()->get('StockEvents');

            if ($this->StockProductos->save($stock_prod_entity)) {


                if($model_stock_events->deleteAll(['comprasstock_id' => $produ_stock->comprasstock_idcomprasstock,
                    'stockproductos_id' => $stock_prod_entity->idstock_productos])){

                    //debug('egegege');
                    return true;

                }

            }
            return false;



        } catch (InvalidPrimaryKeyException $e){


            return false;

        } catch (RecordNotFoundException $e){
            return false;
        }
        catch (Exception $e){

            return false;
        }

    }


    public function updateStockByVenta($productos_id = [], $productos_array = [])
    {

        $stocks = $this->StockProductos->find('all', [])
            ->where(['productos_idproductos IN ' => $productos_id]);

        $model_stock_events = $this->getTableLocator()->get('StockEvents');


        $entities = null;

        foreach ($productos_id as $id)
        {


            $stock = $this->StockProductos->find('all', [

            ])
            ->where(['productos_idproductos' => $id])->first();

            foreach ($productos_array['productos_ventas'] as $prod)
                 {
                     $stock_events_entity = $model_stock_events->newEmptyEntity();
                     if($stock->productos_idproductos == $prod['productos_idproductos']){

                         $stock->stock = $stock->stock - $prod['cantidad'];

                         $stock_events_entity->categoria = StockEventsEnum::VENTAS;
                         $stock_events_entity->cantidad = $prod['cantidad'];
                         $stock->stock_events = [$stock_events_entity];

                     }
                 }
            $entities[] = $stock;
        }

        if ($this->StockProductos->saveMany($entities, [
            'associated' => ['StockEvents']])){

            return true;
        }

        return  false;


    }


    public function updateStockByDevolucion($id_producto = null, $cantidad = null)
    {
        $stock_producto =  $this->StockProductos->find('all', [])
            ->where(['productos_idproductos' => $id_producto]);


        if ($stock_producto->toArray() !== null){

            $stock_prod_entity =  $this->StockProductos->get($stock_producto->toArray()[0]->idstock_productos, [
                'contain' => ['StockEvents']
            ]);

            debug($stock_prod_entity);

        }


    }

    public function getStockByProducto($id_producto = null)
    {
        $stock = $this->StockProductos->find('all', [
            'fields' => ['cantidad' => 'stock']
        ])
            ->where(['productos_idproductos' => $id_producto])->first();

        return $stock;

    }

}
