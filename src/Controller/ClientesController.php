<?php
declare(strict_types=1);

namespace App\Controller;

use Cake\Datasource\Exception\InvalidPrimaryKeyException;
use Cake\Datasource\Exception\RecordNotFoundException;
use Cake\Event\EventInterface;

/**
 * Clientes Controller
 *
 * @property \App\Model\Table\ClientesTable $Clientes
 */
class ClientesController extends AppController
{
    public function beforeFilter(EventInterface $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub


        $user = $this->Authentication->getIdentity();
        if(isset($user) and $user->role === 'user')
        {
            if (!in_array($this->request->getParam('action'), [])) {
                //$this->redirect($this->request->referer());
                $this->Flash->error('Usted no esta autorizado para acceder al Sitio Solicitado');
                $this->redirect(['controller' => 'Index', 'action' => 'index']);
            }

        }
        $this->loadCartProduct();
    }


    public function index()
    {

        $clientes = $this->Clientes->find('all', []);

        $this->set(compact('clientes'));

    }


    public function add()
    {
        $clientes = $this->Clientes->newEmptyEntity();


        if ($this->request->is('post')) {

            $clientes = $this->Clientes->patchEntity($clientes, $this->request->getData());
            if ($this->Clientes->save($clientes)) {
                $this->Flash->success(__('El Cliente se almaceno correctamente.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('El Cliente no se pudo guardar. Intente nuevamente.'));

        }

        $this->set(compact('clientes'));
    }


    public function edit($id = null)
    {

        try{

            $clientes =  $this->Clientes->get($id);
            $this->set(compact('clientes'));


            if ($this->request->is(['patch', 'post', 'put'])) {
                $clientes = $this->Clientes->patchEntity($clientes, $this->request->getData());
                if ($this->Clientes->save($clientes)) {
                    $this->Flash->success(__('La Categoria se almaceno correctamente.'));

                    return $this->redirect(['action' => 'index']);
                }
                $this->Flash->error(__('El Cliente no se pudo guardar. Intente nuevamente.'));

            }
            $this->set(compact('clientes'));
        } catch (InvalidPrimaryKeyException $e){
            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));

        } catch (RecordNotFoundException $e){
            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
        }
        catch (Exception $e){
            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
        }
    }

    public function delete($id)
    {
        $this->request->allowMethod(['post', 'delete']);

        try{
            $clientes =  $this->Clientes->get($id);

            if ($this->Clientes->delete($clientes)) {
                $this->Flash->success(__('El Registro ha sido eliminado.'));

                return $this->redirect(['action' => 'index']);
            } else {
                $this->Flash->error(__('El Registro no pudo ser eliminado. Intente nuevamente.'));
            }

        } catch (InvalidPrimaryKeyException $e){
            $this->Flash->error(__('El Registro no pudo ser eliminado. Intente nuevamente.'));

        } catch (RecordNotFoundException $e){
            $this->Flash->error(__('El Registro no pudo ser eliminado. Intente nuevamente.'));
        }
        catch (Exception $e){
            $this->Flash->error(__('El Registro no pudo ser eliminado. Intente nuevamente.'));
        }

    }


}
