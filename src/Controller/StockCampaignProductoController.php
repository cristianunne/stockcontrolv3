<?php
declare(strict_types=1);

namespace App\Controller;

use Cake\Datasource\Exception\InvalidPrimaryKeyException;
use Cake\Datasource\Exception\RecordNotFoundException;
use Cake\Event\EventInterface;
use Cake\ORM\Query;

/**
 * StockCampaignProducto Controller
 *
 * @property \App\Model\Table\StockCampaignProductoTable $StockCampaignProducto
 */
class StockCampaignProductoController extends AppController
{
    public function beforeFilter(EventInterface $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub


        $user = $this->Authentication->getIdentity();
        if(isset($user) and $user->role === 'user')
        {
            if (!in_array($this->request->getParam('action'), [])) {
                //$this->redirect($this->request->referer());
                $this->Flash->error('Usted no esta autorizado para acceder al Sitio Solicitado');
                $this->redirect(['controller' => 'Index', 'action' => 'index']);
            }

        }
        $this->loadCartProduct();
    }


    public function addProductoToCamionCampaign($idstock_camion_campaign = null, $id_camion = null, $idcampaign = null)
    {

        //traere los productos que no esten asignados
        //$idstock_camion_campaign se vincula con un camion

        $productos_camion = $this->StockCampaignProducto->find('all', [
            'fields' => ['productos_idproductos']
        ])
            ->where(['stock_camion_campaign_idstock_camion_campaign' => $idstock_camion_campaign]);


        //traigo los productos
        $productos_model = $this->getTableLocator()->get('Productos');

        $productos = $productos_model->find('all', [
            'contain' => ['Categories', 'Subcategories', 'Proveedores','Precios' => function(Query $q){

                return $q->where(['active' => 1]);
            }, 'Descuentos' => function(Query $q){

                return $q->where(['active' => 1]);
            }, 'StockProductos']
        ])
            ->where(['idproductos NOT IN' => $productos_camion])
            ->order(['idproductos' => 'ASC']);


        $this->set(compact('productos'));
        $this->set(compact('idstock_camion_campaign'));
        $this->set(compact('idcampaign'));
        $this->set(compact('id_camion'));

    }

    public function add($idproducto = null, $idstock_camion_campaign = null, $idcampaign = null, $stock = null, $id_camion = null)
    {



        $stock_campaign_prod = $this->StockCampaignProducto->newEmptyEntity();

        //traigo el producto
        $producto = $this->_getNameProductById($idproducto);

        $cantidad_stock = $this->_getStockByProductoCamiones($idproducto, $idcampaign, $stock);

        $stock_camiones = $cantidad_stock['stock_camiones'];
        $stock_general = $cantidad_stock['stock_general'];



        if($this->request->is('post')){
            $cantidad = $this->request->getData('cantidad');
            if($cantidad > $stock_camiones){
                $this->Flash->error(__('El Producto no se pudo asignar porque la cantidad excede el Stock Disponible. Intente nuevamente.'));
            } else {
                //debug($this->request->getData());
                $stock_campaign_prod = $this->StockCampaignProducto->patchEntity($stock_campaign_prod, $this->request->getData());
                $stock_campaign_prod->cantidad_initial = $cantidad;

                if($this->StockCampaignProducto->save($stock_campaign_prod)){

                    $this->Flash->success(__('El Producto se asigno correctamente al Camion.'));
                    return $this->redirect(['action' => 'addProductoToCamionCampaign', $idstock_camion_campaign, $id_camion, $idcampaign]);
                }

                $this->Flash->error(__('El Producto no se pudo asignar. Intente nuevamente.'));

            }


        }

        $this->set(compact('stock_camiones'));
        $this->set(compact('stock_general'));
        $this->set(compact('idproducto'));
        $this->set(compact('producto'));
        $this->set(compact('stock_campaign_prod'));
        $this->set(compact('idstock_camion_campaign'));
        $this->set(compact('id_camion'));
        $this->set(compact('idcampaign'));

    }


    public function edit($idstock_campaign_producto = null, $idproducto = null, $idstock_camion_campaign = null, $idcampaign = null, $stock = null, $id_camion = null)
    {

        try{

            $stock_campaign_prod = $this->StockCampaignProducto->get($idstock_campaign_producto);

            //traigo el producto
            $producto = $this->_getNameProductById($idproducto);



            $cantidad_stock = $this->_getStockByProductoCamiones($idproducto, $idcampaign, $stock);

            $stock_camiones = $cantidad_stock['stock_camiones'];
            $stock_general = $cantidad_stock['stock_general'];

            if($this->request->is(['patch', 'post', 'put'])){
                $cantidad = $this->request->getData('cantidad');
                if($cantidad > ($stock_camiones + $stock_campaign_prod->cantidad)){
                    $this->Flash->error(__('El Producto no se pudo asignar porque la cantidad excede el Stock Disponible. Intente nuevamente.'));
                } else {
                    //debug($this->request->getData());
                    $stock_campaign_prod = $this->StockCampaignProducto->patchEntity($stock_campaign_prod, $this->request->getData());
                    $stock_campaign_prod->cantidad_initial = $cantidad;

                    if($this->StockCampaignProducto->save($stock_campaign_prod)){

                        $this->Flash->success(__('El Producto se asigno correctamente al Camion.'));
                        return $this->redirect(['controller' => 'Campaign' ,'action' => 'stockCamionCampaign',
                            $idstock_camion_campaign, $id_camion, $idcampaign]);
                    }

                    $this->Flash->error(__('El Producto no se pudo asignar. Intente nuevamente.'));

                }


            }

            $this->set(compact('stock_camiones'));
            $this->set(compact('stock_general'));
            $this->set(compact('idproducto'));
            $this->set(compact('producto'));
            $this->set(compact('stock_campaign_prod'));
            $this->set(compact('idstock_camion_campaign'));
            $this->set(compact('id_camion'));
            $this->set(compact('idcampaign'));


        } catch (InvalidPrimaryKeyException $e){
            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));

        } catch (RecordNotFoundException $e){
            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
        }
        catch (Exception $e){
            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
        }



    }


    public function delete($idstock_campaign_producto = null)
    {
        $this->request->allowMethod(['post', 'delete']);

        try{
            $stock_camp =  $this->StockCampaignProducto->get($idstock_campaign_producto);

            if ($this->StockCampaignProducto->delete($stock_camp)) {
                $this->Flash->success(__('El Registro ha sido eliminado.'));

                return $this->redirect($this->request->referer());
            } else {
                $this->Flash->error(__('El Registro no pudo ser eliminado. Intente nuevamente.'));
            }

        } catch (InvalidPrimaryKeyException $e){
            $this->Flash->error(__('El Registro no pudo ser eliminado. Intente nuevamente.'));

        } catch (RecordNotFoundException $e){
            $this->Flash->error(__('El Registro no pudo ser eliminado. Intente nuevamente.'));
        }
        catch (Exception $e){
            $this->Flash->error(__('El Registro no pudo ser eliminado. Intente nuevamente.'));
        }

    }



    private function _getNameProductById($id_producto = null)
    {

        try {

            $model_pedidos_productos = $this->getTableLocator()->get('Productos');

            $producto = $model_pedidos_productos->get($id_producto);

            return $producto->name . ' ' . $producto->content . ' ' . $producto->unidad . ' (' . $producto->name . ')';

        } catch (InvalidPrimaryKeyException $e) {
            //$this->redirect($this->request->referer());
            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));

        } catch (RecordNotFoundException $e) {
            //$this->redirect($this->request->referer());
            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
        } catch (Exception $e) {
            //debug($e);
            //$this->redirect($this->request->referer());
            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
        }



        return false;

    }

    private function _getStockByProductoCamiones($id_producto = null, $idcampaign = null, $stock_ = null)
    {
        //El sotck va a depender del STOCK GENERAL y del STOCK OCUPADO EN LA CAMPA;A
        //traigo los datos de la tabla stock_camion_campaign para saber los camiones que estan participando
        $model_stock_camion_campaign = $this->getTableLocator()->get('StockCamionCampaign');

        $stock_camion_camp = $model_stock_camion_campaign->find('all', [
            'contain' => ['StockCampaignProducto' => function($q) use ($id_producto){

            return $q->where(['productos_idproductos' => $id_producto]);
            }]
        ])
            ->where(['campaign_idcampaign' => $idcampaign]);

        $cantidad = 0;

        //recorro conun foreach y sumo los productos
        foreach ($stock_camion_camp as $stock)
        {
            if($stock->stock_campaign_producto != null){

                foreach ($stock->stock_campaign_producto as $producto)
                {
                    $cantidad = $cantidad + $producto->cantidad;
                }

            }
        }

        //traigo los valores del stock general y le resto
        $array = [
            'stock_general' => $stock_,
            'stock_camiones' =>  $stock_ - $cantidad
        ];

       return $array;
    }



    public function updateStockCamion($idstock_camion_campaign = null, $id_producto = null, $cantidad = null)
    {

        if($idstock_camion_campaign == null){
            return false;
        } else {

            try{

                $stock_camion = $this->StockCampaignProducto->find('all', [])
                    ->where(['stock_camion_campaign_idstock_camion_campaign' => $idstock_camion_campaign,
                        'productos_idproductos' => $id_producto])->first();


                $stock_camion->cantidad = $stock_camion->cantidad - $cantidad;

                if($this->StockCampaignProducto->save($stock_camion)){
                    return  true;
                }

                return false;

            } catch (InvalidPrimaryKeyException $e) {
               return false;

            } catch (RecordNotFoundException $e) {
                return false;
            } catch (Exception $e) {
                return false;
            }


        }

    }


    public function setStateProducto($id_stock_camp_prod = null, $status = null)
    {
        $this->request->allowMethod(['post', 'delete']);

        try{
            $prod_stock_camp =  $this->StockCampaignProducto->get($id_stock_camp_prod);
            $prod_stock_camp->status = $status;

            if ($this->StockCampaignProducto->save($prod_stock_camp)) {
                $this->Flash->success(__('El producto se ha aprobado.'));

                return $this->redirect($this->request->referer());
            } else {
                $this->Flash->error(__('El Producto no se pudo aprobar. Intente nuevamente.'));
            }

        } catch (InvalidPrimaryKeyException $e){

            $this->Flash->error(__('El Producto no se pudo aprobar. Intente nuevamente.'));

        } catch (RecordNotFoundException $e){
            $this->Flash->error(__('El Producto no se pudo aprobar. Intente nuevamente.'));

        }
        catch (Exception $e){
            $this->Flash->error(__('El Producto no se pudo aprobar. Intente nuevamente.'));

        }
    }


    private function _getStockByProductoInCamiones($idcampaign = null)
    {

        $stock_camion_campaign_model = $this->getTableLocator()->get('StockCamionCampaign');

        $stock_camion_campaign = $stock_camion_campaign_model->find('all', [
            'contain' => ['StockCampaignProducto']
        ])->where(['campaign_idcampaign' => $idcampaign]);

        return $stock_camion_campaign;

    }

}
