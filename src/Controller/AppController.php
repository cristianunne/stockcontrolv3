<?php
declare(strict_types=1);

/**
 * CakePHP(tm) : Rapid Development Framework (https://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 * @link      https://cakephp.org CakePHP(tm) Project
 * @since     0.2.9
 * @license   https://opensource.org/licenses/mit-license.php MIT License
 */
namespace App\Controller;

use Cake\Controller\Controller;
use Cake\Event\EventInterface;
use Cake\ORM\Query;

/**
 * Application Controller
 *
 * Add your application-wide methods in the class below, your controllers
 * will inherit them.
 *
 * @link https://book.cakephp.org/4/en/controllers.html#the-app-controller
 */
class AppController extends Controller
{
    protected $cart_product = null;

    /**
     * Initialization hook method.
     *
     * Use this method to add common initialization code like loading components.
     *
     * e.g. `$this->loadComponent('FormProtection');`
     *
     * @return void
     */
    public function initialize(): void
    {
        parent::initialize();

        $this->loadComponent('RequestHandler');
        $this->loadComponent('Flash');

        $this->loadComponent('Authentication.Authentication');
        //$this->loadComponent('Authorization.Authorization');

        /*
         * Enable the following component for recommended CakePHP form protection settings.
         * see https://book.cakephp.org/4/en/controllers/components/form-protection.html
         */
        //$this->loadComponent('FormProtection');
    }


    public function json($data){

        //$this->response->getType('json');
        //$this->response->withStringBody(json_encode($data));
        return $this->response->withType('application/json')->withStringBody(json_encode($data));

    }

    protected function loadCartProduct()
    {
        $productos_cart = null;
        $user = $this->Authentication->getIdentity();

        if (isset($user->idusers)){

            $cart_session_model = $this->getTableLocator()->get('CartSession');

            $this->cart_product = $cart_session_model->find('all', [
                'contain' => ['Productos' => ['Precios' => function(Query $q){

                return $q->where(['active' => 1]);
                }, 'Descuentos']]
            ])
                ->where(['users_idusers' => $user->idusers])->toArray();
            $productos_cart =  $this->cart_product;

            $this->set(compact('productos_cart'));
        }
        $this->set(compact('productos_cart'));

    }


    public function beforeFilter(EventInterface $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub

        if ($this->Authentication->getIdentity() !== null){
            $user = $this->Authentication->getIdentity();
            $role = $user->role;
            $this->set(compact('role'));
        }




    }

}
