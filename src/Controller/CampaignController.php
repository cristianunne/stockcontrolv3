<?php
declare(strict_types=1);

namespace App\Controller;

use Cake\Datasource\Exception\InvalidPrimaryKeyException;
use Cake\Datasource\Exception\RecordNotFoundException;
use Cake\Event\EventInterface;
use Cake\ORM\Query;

/**
 * Campaign Controller
 *
 * @property \App\Model\Table\CampaignTable $Campaign
 */
class CampaignController extends AppController
{

    public function beforeFilter(EventInterface $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub


        $user = $this->Authentication->getIdentity();
        if(isset($user) and $user->role === 'empleado')
        {
            if (!in_array($this->request->getParam('action'), ['indexUser', 'index', 'viewUser', 'viewVentasNotFinish', 'stockCamionCampaign'])) {
                //$this->redirect($this->request->referer());
                $this->Flash->error('Usted no esta autorizado para acceder al Sitio Solicitado');
                $this->redirect(['controller' => 'Index', 'action' => 'index']);
            }

        }
        $this->loadCartProduct();
    }


    public function index()
    {

        $estado = true;
        $campaign = $this->Campaign->find('all', [])
        ->where(['status' => 1]);

        if($campaign->toArray() != null){
            $campaign = $campaign->first();

        } else {
            $estado = false;
        }



        $campaign_finish = $this->Campaign->find('all', [])
            ->where(['status' => 0]);

        $this->set(compact('estado'));
        $this->set(compact('campaign'));
        $this->set(compact('campaign_finish'));
    }

    public function indexUser()
    {

        $user = $this->Authentication->getIdentity()->idusers;


        $campaign = $this->Campaign->find('all', [
            'contain' => ['StockCamionCampaign' => function($q) use ($user){

                return $q->where(['users_idusers' => $user]);
            }]
        ])
            ->where(['status' => 1])->first();

        $is_campaign_active = !isset($campaign->stock_camion_campaign) ? false : true;
        $resultados = null;
        if($is_campaign_active){
            $resultados = $this->_getTotalesVentasByUser($campaign->idcampaign);
        }

        $campaign_finish = $this->Campaign->find('all', [])
            ->where(['status' => 0]);

        $this->set(compact('resultados'));
        $this->set(compact('is_campaign_active'));
        $this->set(compact('campaign'));
        $this->set(compact('campaign_finish'));
    }



    public function add()
    {
        $campaign = $this->Campaign->newEmptyEntity();

        if($this->request->is('post')){

            $campaign->fecha_inicio= $this->request->getData('fecha_inicio');
            $campaign->fecha_fin = $this->request->getData('fecha_fin');

            $max = $this->_getMaximumCampaign();
            $campaign->number = $max->max + 1;

            if($this->Campaign->save($campaign)){
                $this->Flash->success(__('La CampaÃ±a se ha creado correctamente.'));

                return $this->redirect(['action' => 'index']);
            }

            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));

        }


        $this->set(compact('campaign'));
    }



    public function viewUser($id_campaign = null)
    {
        $user = $this->Authentication->getIdentity()->idusers;

        $campaign = $this->Campaign->find('all', [
            'contain' => ['StockCamionCampaign' => function($q) use ($user){

                return $q
                    ->contain(['Users', 'Camiones'])
                    ->where(['users_idusers' => $user]);
            }, 'Ventas' => function($q) use ($user){

                return $q->where(['users_idusers' => $user]);
            }]
        ])->where(['idcampaign' => $id_campaign])
          ->first();


        $this->set(compact('campaign'));

    }

    public function viewAdmin($id_campaign = null)
    {

        $campaign = $this->Campaign->find('all', [
            'contain' => ['StockCamionCampaign' => ['Camiones', 'Users']
            , 'Ventas' => ['Clientes', 'Users']]
        ])->where(['idcampaign' => $id_campaign])
            ->first();

        $option['idcampaign'] = $id_campaign;
        //traigo los resumenes de las ventas
        $resultados = $this->_getTotalesVentas($option);


        //debug($campaign->toArray());
        $this->set(compact('campaign'));
        $this->set(compact('resultados'));

    }


    public function viewVentasByCamion($id_campaign = null, $id_camion = null, $fecha = null)
    {

        //traigo las ventas filtrada con el camion y las CAmpa;as
        $campaign = null;

        if($fecha == null){
            $campaign = $this->Campaign->find('all', [
                'contain' => ['StockCamionCampaign' => ['Camiones', 'Users'], 'Ventas' => function($q) use($id_camion) {
                    return $q
                        ->contain(['Clientes', 'Users'])
                        ->where(['camion_idcamion' => $id_camion]);
                }]
            ])
                ->where(['idcampaign' => $id_campaign])->first();
        } else {

            $campaign = $this->Campaign->find('all', [
                'contain' => ['StockCamionCampaign' => ['Camiones', 'Users'], 'Ventas' => function($q) use($id_camion, $fecha) {
                    return $q
                        ->contain(['Clientes', 'Users'])
                        ->where(['camion_idcamion' => $id_camion, 'date(Ventas.created)' => $fecha]);
                }]
            ])
                ->where(['idcampaign' => $id_campaign])->first();
        }


        $option['idcampaign'] = $id_campaign;
        $option['camion_idcamion'] = $id_camion;
        $option['fecha'] = $fecha;

        //traigo los resumenes de las ventas
        $resultados = $this->_getTotalesVentas($option);


        $this->set(compact('campaign'));
        $this->set(compact('resultados'));


    }

    public function viewVentasNotFinish($id_campaign = null)
    {
        try{

            $campaign = $this->Campaign->get($id_campaign, [
                'contain' => ['VentasTemp']
            ]);



            $this->set(compact('campaign'));

        } catch (InvalidPrimaryKeyException $e){
            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));

        } catch (RecordNotFoundException $e){
            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
        }
        catch (Exception $e){
            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
        }


    }

    public function config($id_campaign = null)
    {

        try{

            $campaign = $this->Campaign->get($id_campaign, [
                'contain' => ['StockCamionCampaign' => ['Users', 'Camiones']]
            ]);



            $this->set(compact('campaign'));

        } catch (InvalidPrimaryKeyException $e){
            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));

        } catch (RecordNotFoundException $e){
            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
        }
        catch (Exception $e){
            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
        }

    }

    public function addCamionToCampaign($campaign_idcampaign = null)
    {
        $campaign_camion_user_model = $this->getTableLocator()->get('StockCamionCampaign');

        $users_list = $campaign_camion_user_model->find('all', [
            'fields' => ['users_idusers']
        ])->where(['campaign_idcampaign' => $campaign_idcampaign]);

        $camion_list = $campaign_camion_user_model->find('all', [
            'fields' => ['camion_idcamion']
        ])->where(['campaign_idcampaign' => $campaign_idcampaign]);

        //traigo los usuarios como lista
        $users_conroller = new UsersController();
        $users = $users_conroller->getUsersList($users_list);


        //Traigo los camiones
        $camiones_controller = new CamionesController();
        $camiones = $camiones_controller->getCamionesList($camion_list);


        $stock_camp_cam = $campaign_camion_user_model->newEmptyEntity();

        if($this->request->is('post'))
        {

            $stock_camp_cam = $campaign_camion_user_model->patchEntity($stock_camp_cam, $this->request->getData());

            if($campaign_camion_user_model->save($stock_camp_cam)){

                $this->Flash->success(__('El Camion se asigno correctamente.'));
                return $this->redirect(['action' => 'config', $campaign_idcampaign]);
            }

            $this->Flash->error(__('El Camion no se pudo asignar. Intente nuevamente.'));

        }


        $this->set(compact('stock_camp_cam'));
        $this->set(compact('users'));
        $this->set(compact('camiones'));
        $this->set(compact('campaign_idcampaign'));

    }

    public function stockCamionCampaign($idstock_camion_campaign = null, $id_camion = null, $idcampaign = null, $status = null)
    {

        //Traigo el stockcamion campaing
        $model_stock_camion_campaign = $this->getTableLocator()->get('StockCamionCampaign');

        $productos = $model_stock_camion_campaign->find('all', [
            'contain' => ['StockCampaignProducto' => ['Productos' => ['Categories', 'Subcategories', 'Proveedores', 'StockProductos']]]
        ])->where(['campaign_idcampaign' => $idcampaign, 'camion_idcamion' => $id_camion])->first();

        $this->set(compact('productos'));
        $this->set(compact('idstock_camion_campaign'));
        $this->set(compact('id_camion'));
        $this->set(compact('idcampaign'));
        $this->set(compact('status'));

        //debug($productos);
    }


    public function setStateCampaign($id_campaign = null, $state = null)
    {
        try{

            $campaign = $this->Campaign->get($id_campaign, [

            ]);


            $campaign->status = $state;

            if($this->Campaign->save($campaign)){
                $this->Flash->success(__('El Cambio se asigno correctamente.'));
                return $this->redirect(['action' => 'config', $id_campaign]);
            }



            $this->set(compact('campaign'));

        } catch (InvalidPrimaryKeyException $e){
            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));

        } catch (RecordNotFoundException $e){
            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
        }
        catch (Exception $e){
            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
        }


    }


    public function selectFechaVentas($id_campaign = null, $id_camion = null)
    {

        $campaign = $this->Campaign->find('all', [])
            ->where(['status' => 1])->first();

        $min_year = $campaign->fecha_inicio->year;
        $max_year = $campaign->fecha_fin->year;


        if($this->request->is('post')){

            $fecha = $this->request->getData('fecha');
            $fecha_select = strtotime($fecha);

            $fecha_inicio =  strtotime($campaign->fecha_inicio->toDateString());
            $fecha_fin =  strtotime($campaign->fecha_fin->toDateString());


            if($fecha_select >= $fecha_inicio && $fecha_select <= $fecha_fin){

                $fecha_select = date('Y-m-d',$fecha_select);

                return $this->redirect(['action' => 'viewVentasByCamion', $id_campaign, $id_camion, $fecha_select]);

            } else {
                $this->Flash->error(__('Debe seleccionar una Fecha comprendida en el rango de la CampaÃ±a'));
            }


        }

        $this->set(compact('id_campaign'));
        $this->set(compact('campaign'));
        $this->set(compact('min_year'));
        $this->set(compact('max_year'));

    }


    private function _getTotalesVentasByUser($id_campaing = null)
    {
        $user = $this->Authentication->getIdentity()->idusers;

        $ventas_model = $this->getTableLocator()->get('Ventas');

        $ventas_tot = $ventas_model->find('all', [
            'fields' => [
                'subtotal' => 'sum(subtotal)',
                'descuentos' => 'sum(descuentos)',
                'total' => 'sum(total)',
                'descuento_general' => 'sum(descuento_general)',

            ]
        ])->where(['users_idusers' => $user, 'campaign_idcampaign' => $id_campaing]);

        return $ventas_tot->first();

    }

    private function _getTotalesVentas($option = [])
    {

        $ventas_model = $this->getTableLocator()->get('Ventas');


        $array_result['subtotal'] = $ventas_model->find('GetSubTotal', $option)->first()->subtotal;
        $array_result['cuenta_corriente'] = $ventas_model->find('GetCuentaCorriente', $option)->first()->subtotal;
        $array_result['descuentos'] = $ventas_model->find('GetDescuentos', $option)->first()->descuentos;
        $array_result['descuentos_general'] = $ventas_model->find('GetDescuentosGeneral', $option)->first()->descuento_general;
        $array_result['total_efectivo'] = $array_result['subtotal'] - $array_result['descuentos'] - $array_result['descuentos_general'];
        $array_result['descuentos_cuenta_corriente'] = $ventas_model->find('GetDescuentosCuentaCorriente', $option)->first()->descuentos;
        $array_result['descuento_genera_cuenta_corriente'] = $ventas_model->find('GetDescuentosGeneralCuentaCorriente', $option)->first()->descuento_general;
        $array_result['subtotal_general'] =  $array_result['subtotal'] + $array_result['cuenta_corriente'];

        $array_result['total'] = $array_result['subtotal'] + $array_result['cuenta_corriente'] -
            $array_result['descuentos'] - $array_result['descuentos_general'] -  $array_result['descuentos_cuenta_corriente'] - $array_result['descuento_genera_cuenta_corriente'];

        return $array_result;

    }


    private function _getMaximumCampaign()
    {
        $max = $this->Campaign->find('all', [
            'fields' => ['max' =>'MAX(number)']
        ])->first();

        return $max;
    }





}
