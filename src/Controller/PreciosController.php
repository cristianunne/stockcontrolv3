<?php
declare(strict_types=1);

namespace App\Controller;

use Cake\Datasource\Exception\InvalidPrimaryKeyException;
use Cake\Datasource\Exception\RecordNotFoundException;
use Cake\Event\EventInterface;

/**
 * Precios Controller
 *
 * @property \App\Model\Table\PreciosTable $Precios
 */
class PreciosController extends AppController
{

    public function beforeFilter(EventInterface $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub


        $user = $this->Authentication->getIdentity();
        if(isset($user) and $user->role === 'user')
        {
            if (!in_array($this->request->getParam('action'), ['index', 'edit'])) {
                //$this->redirect($this->request->referer());
                $this->Flash->error('Usted no esta autorizado para acceder al Sitio Solicitado');
                $this->redirect(['controller' => 'Index', 'action' => 'index']);
            }

        }
    }


    public function add($id_productos = null)
    {

        if ($id_productos == null)
        {
            $this->Flash->error('Tenemos inconvenientes para actualizar el Precio. Intente nuevamente.');
            return $this->redirect($this->request->referer());
        }
        $precio = $this->Precios->newEmptyEntity();


        if ($this->request->is('post')) {

            $options['idproducto'] = $id_productos;
            //traigo el ultimo precio con valor
            $id_precio_valor = $this->Precios->find('GetLastPrecioValor', $options)->toArray()[0]->idprecios;


            if($this->_setPriceToFalse($id_precio_valor))
            {
                $precio = $this->Precios->patchEntity($precio, $this->request->getData());

                $precio->productos_idproductos = $id_productos;

                if ($this->Precios->save($precio)) {
                    $this->Flash->success(__('El Precio se almaceno correctamente.'));


                    return $this->redirect(['controller' => 'Productos', 'action' => 'viewConfig', $id_productos]);
                }
                $this->Flash->error(__('El Precio no se pudo guardar. Intente nuevamente.'));
            } else {
                $this->Flash->error(__('El Precio no se pudo guardar. Intente nuevamente.'));
            }


        }

        $this->set(compact('precio'));

    }

    private function _setPriceToFalse($id_product)
    {
        try{

            $precio =  $this->Precios->get($id_product);
            $precio->active = 0;

            if ($this->Precios->save($precio)) {

                return true;
            }

        } catch (InvalidPrimaryKeyException $e){
            return false;
        } catch (RecordNotFoundException $e){
           return false;
        }
        catch (Exception $e){
            return false;

        }
    }

}
