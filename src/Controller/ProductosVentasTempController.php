<?php
declare(strict_types=1);

namespace App\Controller;

use App\Model\Entity\Precio;
use Cake\Datasource\ConnectionManager;
use Cake\Datasource\Exception\InvalidPrimaryKeyException;
use Cake\Datasource\Exception\RecordNotFoundException;
use Cake\Event\EventInterface;

/**
 * ProductosVentasTemp Controller
 *
 * @property \App\Model\Table\ProductosVentasTempTable $ProductosVentasTemp
 */
class ProductosVentasTempController extends AppController
{
    public function beforeFilter(EventInterface $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub


        $user = $this->Authentication->getIdentity();
        if(isset($user) and $user->role === 'user')
        {
            if (!in_array($this->request->getParam('action'), [])) {
                //$this->redirect($this->request->referer());
                $this->Flash->error('Usted no esta autorizado para acceder al Sitio Solicitado');
                $this->redirect(['controller' => 'Index', 'action' => 'index']);
            }

        }
        $this->loadCartProduct();
    }


    public function add($ventas_idventas_temp = null, $id_producto = null)
    {
        //tengo que traer el producto, precio y descuentos
        try{

            $user_id = $this->Authentication->getIdentity()->idusers;

            $ventas_temp_model = $this->getTableLocator()->get('VentasTemp');
            $ventas_temp = $ventas_temp_model->get($ventas_idventas_temp);

            //debug($ventas_temp);


            $stock_producto_by_camion =  $this->_getStockByProductoCamiones($id_producto, $ventas_temp->campaign_idcampaign, $user_id);
            $producto = $this->_getNameProductById($id_producto);

            //tengo que traer los precios y descuentos
            $precios_controller = new PreciosController();
            $descuentos_controller = new DescuentosController();

            $precio = $precios_controller->getPriceByProducto($id_producto);
            $descuento = $descuentos_controller->getDescuentoByProducto($id_producto);


            $producto_ventas_temp = $this->ProductosVentasTemp->newEmptyEntity();

            $stock = $stock_producto_by_camion;


            if($this->request->is('post')){

                $conn = ConnectionManager::get('default');
                $conn->begin();


                $producto_ventas_temp = $this->ProductosVentasTemp->patchEntity($producto_ventas_temp, $this->request->getData());
                //debug($producto_ventas_temp);

                if($this->ProductosVentasTemp->save($producto_ventas_temp)){


                    //tengo que modificar la tabla ventas?temp
                    $data = [
                        'cantidad' => $producto_ventas_temp->cantidad,
                        'precio' => $producto_ventas_temp->precio_unidad,
                        'descuento' => $producto_ventas_temp->descuento_unidad
                    ];

                    $ventas_temp_controller = new VentasTempController();

                    if ($ventas_temp_controller->updateVentasTemp($ventas_idventas_temp, $data, true)) {
                        //vuelve a SELECT PRODUCT con el id de venta
                        $conn->commit();
                        $this->Flash->success(__('El Producto se agrego correctamente.'));
                        return $this->redirect(['controller' => 'VentasTemp', 'action' => 'selectProductos', $ventas_idventas_temp]);
                    }

                }

                $this->Flash->error(__('El Producto no se pudo guardar. Intente nuevamente.'));
                $conn->rollback();

            }



            //$id_campaign = $ventas_temp->campaign_idcampaign;

            $this->set(compact('ventas_temp'));
            $this->set(compact('producto'));
            $this->set(compact('id_producto'));
            $this->set(compact('precio'));
            $this->set(compact('descuento'));
            $this->set(compact('stock'));
            $this->set(compact('ventas_idventas_temp'));
            $this->set(compact('producto_ventas_temp'));

        } catch (InvalidPrimaryKeyException $e){

            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));

        } catch (RecordNotFoundException $e){
            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
        }
        catch (Exception $e){

            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
        }



    }

    public function edit($idproductos_ventas_temp = null)
    {
        try{

            $producto_ventas_temp = $this->ProductosVentasTemp->get($idproductos_ventas_temp);

            $data = [
                'cantidad' => $producto_ventas_temp->cantidad,
                'precio' => $producto_ventas_temp->precio_unidad,
                'descuento' => $producto_ventas_temp->descuento_unidad
                ];

            $this->set(compact('producto_ventas_temp'));

            $user_id = $this->Authentication->getIdentity()->idusers;

            $ventas_temp_model = $this->getTableLocator()->get('VentasTemp');
            $ventas_temp = $ventas_temp_model->get($producto_ventas_temp->ventas_idventas_temp);

            //debug($ventas_temp);


            $stock_producto_by_camion =  $this->_getStockByProductoCamiones($producto_ventas_temp->productos_idproductos, $ventas_temp->campaign_idcampaign, $user_id);
            $producto = $this->_getNameProductById($producto_ventas_temp->productos_idproductos);

            //tengo que traer los precios y descuentos
            $precios_controller = new PreciosController();
            $descuentos_controller = new DescuentosController();

            $precio = $precios_controller->getPriceByProducto($producto_ventas_temp->productos_idproductos);
            $descuento = $descuentos_controller->getDescuentoByProducto($producto_ventas_temp->productos_idproductos);


            $stock = $stock_producto_by_camion;
            $id_producto = $producto_ventas_temp->productos_idproductos;



            if ($this->request->is(['patch', 'post', 'put'])) {

                $conn = ConnectionManager::get('default');
                $conn->begin();

                $producto_ventas_temp_ = $this->ProductosVentasTemp->patchEntity($producto_ventas_temp, $this->request->getData());


                //tengo que modificar la tabla ventas?temp
                $data['cantidad_new'] = $producto_ventas_temp_->cantidad;
                $data['precio_new'] = $producto_ventas_temp_->precio_unidad;
                $data['descuento_new'] = $producto_ventas_temp_->descuento_unidad;


                if($this->ProductosVentasTemp->save($producto_ventas_temp_)){


                    $ventas_temp_controller = new VentasTempController();

                    if($ventas_temp_controller->updateEditVentasTemp($producto_ventas_temp->ventas_idventas_temp, $data))
                    {

                        $conn->commit();
                        //$conn->rollback();
                        $this->Flash->success(__('El Producto se edito correctamente.'));
                        return $this->redirect(['controller' => 'VentasTemp', 'action' => 'selectProductos', $producto_ventas_temp->ventas_idventas_temp]);

                    }


                }

                $this->Flash->error(__('El Producto no se pudo guardar. Intente nuevamente.'));
                $conn->rollback();


            }
            $ventas_idventas_temp = $producto_ventas_temp->ventas_idventas_temp;


            $this->set(compact('ventas_temp'));
            $this->set(compact('producto'));
            $this->set(compact('id_producto'));
            $this->set(compact('precio'));
            $this->set(compact('descuento'));
            $this->set(compact('stock'));
            $this->set(compact('ventas_idventas_temp'));
            $this->set(compact('producto_ventas_temp'));



        } catch (InvalidPrimaryKeyException $e){
            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));

        } catch (RecordNotFoundException $e){
            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
        }
        catch (Exception $e){
            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));

        }

    }


    public function delete($id_productos_ventas = null, $ventas_idventas_temp = null)
    {
        $this->request->allowMethod(['post', 'delete']);

        try{

            $conn = ConnectionManager::get('default');
            $conn->begin();

            $producto_ventas_temp =  $this->ProductosVentasTemp->get($id_productos_ventas);
            //tengo que modificar la tabla ventas?temp
            $data = [
                'cantidad' => $producto_ventas_temp->cantidad,
                'precio' => $producto_ventas_temp->precio_unidad,
                'descuento' => $producto_ventas_temp->descuento_unidad
            ];

            $ventas_temp_controller = new VentasTempController();


            if ($this->ProductosVentasTemp->delete($producto_ventas_temp)) {

                if ($ventas_temp_controller->updateVentasTemp($ventas_idventas_temp, $data, false)) {
                    //vuelve a SELECT PRODUCT con el id de venta
                    $conn->commit();
                    $this->Flash->success(__('El Producto se elimino correctamente.'));
                    return $this->redirect(['controller' => 'VentasTemp', 'action' => 'view', $ventas_idventas_temp]);
                }

            } else {
                $conn->rollback();
                $this->Flash->error(__('El Registro no pudo ser eliminado. Intente nuevamente.'));
            }

        } catch (InvalidPrimaryKeyException $e){
            $this->Flash->error(__('El Registro no pudo ser eliminado. Intente nuevamente.'));

        } catch (RecordNotFoundException $e){
            $this->Flash->error(__('El Registro no pudo ser eliminado. Intente nuevamente.'));
        }
        catch (Exception $e){
            $this->Flash->error(__('El Registro no pudo ser eliminado. Intente nuevamente.'));
        }

    }


    private function _getNameProductById($id_producto = null)
    {

        try {

            $model_pedidos_productos = $this->getTableLocator()->get('Productos');

            $producto = $model_pedidos_productos->get($id_producto);

            $array = [
                'name' => $producto->name . ' ' . $producto->content . ' ' . $producto->unidad . ' (' . $producto->name . ')',
                'img' => $producto->image
            ];

            return $array;

        } catch (InvalidPrimaryKeyException $e) {
            //$this->redirect($this->request->referer());
            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));

        } catch (RecordNotFoundException $e) {
            //$this->redirect($this->request->referer());
            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
        } catch (Exception $e) {
            //debug($e);
            //$this->redirect($this->request->referer());
            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
        }



        return false;

    }


    private function _getStockByProductoCamiones($id_producto = null, $idcampaign = null, $user_id = null)
    {
        //El sotck va a depender del STOCK GENERAL y del STOCK OCUPADO EN LA CAMPA;A
        //traigo los datos de la tabla stock_camion_campaign para saber los camiones que estan participando
        $model_stock_camion_campaign = $this->getTableLocator()->get('StockCamionCampaign');

        $stock_camion_camp = $model_stock_camion_campaign->find('all', [
            'contain' => ['StockCampaignProducto' => function($q) use ($id_producto){

                return $q->where(['productos_idproductos' => $id_producto]);
            }]
        ])
            ->where(['campaign_idcampaign' => $idcampaign, 'users_idusers' => $user_id]);

        //debug($stock_camion_camp->toArray());

        $cantidad = 0;

        //recorro conun foreach y sumo los productos
        foreach ($stock_camion_camp as $stock)
        {
            if($stock->stock_campaign_producto != null){

                foreach ($stock->stock_campaign_producto as $producto)
                {
                    $cantidad = $cantidad + $producto->cantidad;
                }

            }
        }

        return $cantidad;
    }



}
