<?php
declare(strict_types=1);

namespace App\Controller;

use Cake\Datasource\ConnectionManager;
use Cake\Datasource\Exception\InvalidPrimaryKeyException;
use Cake\Datasource\Exception\RecordNotFoundException;
use Cake\Event\EventInterface;
use Exception;

/**
 * EmpleadoComprasstock Controller
 *
 * @property \App\Model\Table\EmpleadoComprasstockTable $EmpleadoComprasstock
 */
class EmpleadoComprasstockController extends AppController
{
    public function beforeFilter(EventInterface $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub

        $this->Authentication->addUnauthenticatedActions(['login']);

        $user = $this->Authentication->getIdentity();
        if (isset($user) and $user->role === 'user') {
            if (!in_array($this->request->getParam('action'), ['index', 'edit', 'view'])) {
                //$this->redirect($this->request->referer());
                $this->Flash->error('Usted no esta autorizado para acceder al Sitio Solicitado');
                $this->redirect(['controller' => 'Index', 'action' => 'index']);
            }

        }
        $this->loadCartProduct();

    }

    public function index($action = null)
    {
        $user = $this->Authentication->getIdentity();

        //a la tabla comprasstock donde el usercomprador sea el user
        $model_comprastock = $this->getTableLocator()->get('ComprasStock');
        $compras_stock = null;

        if($action == 1){
            $compras_stock = $model_comprastock->find('all', [])
                ->where(['users_comprador' => $user->idusers, 'status' => 0]);

        } else {
            $compras_stock = $model_comprastock->find('all', [])
                ->where(['users_comprador' => $user->idusers, 'status' => 1]);

        }


        //debug($user);

        $this->set(compact('compras_stock'));

    }


    public function view($id = null)
    {

        $user = $this->Authentication->getIdentity();

        $emp_compras =  $this->EmpleadoComprasstock->find('all', [
            'contain' => ['Productos' => ['Categories', 'Proveedores'], 'ComprasStock']
        ])
            ->where(['comprasstock_idcomprasstock' => $id]);

        //debug($emp_compras->toArray());

        //traigo el status de la tabla PRODUCTOS COMPRAS STOCK

        //debug($emp_compras->toArray());
        $this->set(compact('emp_compras'));


    }



    public function add($id_comprastock = null, $id_empleado_comprador = null)
    {

        if($id_comprastock == null){

            return $this->redirect($this->request->referer());

        } else {

            //traigo los productos de esta compra y se los asigno al empleado
            $model_productos_compras = $this->getTableLocator()->get('ProductosComprasstock');

            $productos_compras = $model_productos_compras->find('all', [])
                ->where(['comprasstock_idcomprasstock' => $id_comprastock]);

            $array_data = [];

            foreach ($productos_compras as $prod)
            {

                $arr['comprasstock_idcomprasstock'] = $id_comprastock;
                $arr['productos_idproductos'] = $prod->productos_idproductos;
                $arr['cantidad'] = $prod->cantidad_pedido;
                $arr['users_idusers'] = $id_empleado_comprador;

                $array_data[] = $arr;
            }
            $entities = $this->EmpleadoComprasstock->newEntities($array_data);

            if ($this->EmpleadoComprasstock->saveMany($entities))
            {

                return true;

            }

            return false;
        }
    }

    public function edit($id = null, $comprasstock_idcomprasstock = null)
    {
        try{

            $emp_compras =  $this->EmpleadoComprasstock->get($id, [
                'contain' => ['Productos']
            ]);
            $this->set(compact('emp_compras'));



            if ($this->request->is(['patch', 'post', 'put'])) {
                $emp_compras = $this->EmpleadoComprasstock->patchEntity($emp_compras, $this->request->getData());
                $emp_compras->status = 0;

                if ($this->EmpleadoComprasstock->save($emp_compras)) {
                    $this->Flash->success(__('La Compra se almaceno correctamente.'));

                    return $this->redirect(['action' => 'view', $comprasstock_idcomprasstock]);
                }
                $this->Flash->error(__('La Compra no se pudo guardar. Intente nuevamente.'));

            }

        } catch (InvalidPrimaryKeyException $e){
            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));

        } catch (RecordNotFoundException $e){
            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
        }
        catch (Exception $e){
            $this->Flash->error(__('Error al almacenar los cambios. Intenta nuevamente'));
        }
    }




    public function uploadProductByEmpleado()
    {

        if ($this->request->is('POST')) {

            $array_data = $this->request->getData('array_data');
            //debug($array_data);

            $id_empl_compra = $array_data['idempleado_comprastock'];
            $cantidad = $array_data['cantidad'];



            //actualizo el precio

            try{
                $emp_compras =  $this->EmpleadoComprasstock->get($id_empl_compra);


                $emp_compras->cantidad = $cantidad;

                $emp_compras->status = 1;


                if ($this->EmpleadoComprasstock->save($emp_compras)) {

                    return $this->json(['result' => true]);

                }


            } catch (InvalidPrimaryKeyException $e){

                return $this->json(['result' => false]);
            } catch (RecordNotFoundException $e){
                return $this->json(['result' => false]);
            }
            catch (Exception $e){
                return $this->json(['result' => false]);
            }



            return $this->json(['result' => false]);

        }

    }


    public function aprobarProducto()
    {
        if ($this->request->is('POST')) {

            $array_data = $this->request->getData('array_data');
            //debug($array_data);

            $id_empl_compra = $array_data['cantidad'];
            $cantidad = $array_data['cantidad'];
            $precio = $array_data['precio'];
            $descuento = $array_data['descuento'];



            //actualizo el precio

            try{
                $emp_compras =  $this->EmpleadoComprasstock->get($id_empl_compra);


                $emp_compras->cantidad = $cantidad;

                $emp_compras->status = 1;


                if ($this->EmpleadoComprasstock->save($emp_compras)) {

                    return $this->json(['result' => true]);

                }


            } catch (InvalidPrimaryKeyException $e){

                return $this->json(['result' => false]);
            } catch (RecordNotFoundException $e){
                return $this->json(['result' => false]);
            }
            catch (Exception $e){
                return $this->json(['result' => false]);
            }



            return $this->json(['result' => false]);

        }
    }


    public function desaprobarCompraProducto($comprasstock_idcomprasstock = null, $producto_idproducto = null)
    {


        $empe_prod = $this->EmpleadoComprasstock->find('all', [])
        ->where(['comprasstock_idcomprasstock' => $comprasstock_idcomprasstock, 'productos_idproductos' => $producto_idproducto])->first();

       if($empe_prod != null)
       {
           $empe_prod->status = 0;
           if($this->EmpleadoComprasstock->save($empe_prod)){
               return true;
           }

           return false;
       }

       return false;

    }

    public function deleteById($id = null)
    {
        try{

            if ($this->EmpleadoComprasstock->deleteAll(['comprasstock_idcomprasstock' => $id])) {
               return true;
            } else {
                return false;
            }

        } catch (InvalidPrimaryKeyException $e){
            return false;

        } catch (RecordNotFoundException $e){
            return false;
        }
        catch (Exception $e){
            return false;
        }
    }


    public function delete($comprasstock_idcomprasstock = null, $producto_idproducto = null)
    {
        $empe_prod = $this->EmpleadoComprasstock->find('all', [])
            ->where(['comprasstock_idcomprasstock' => $comprasstock_idcomprasstock, 'productos_idproductos' => $producto_idproducto])->first();

        if($empe_prod != null)
        {
            if($this->EmpleadoComprasstock->delete($empe_prod)){
                return true;
            }

            return false;
        }

        return false;
    }


}
