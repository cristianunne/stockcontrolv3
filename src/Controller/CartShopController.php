<?php
declare(strict_types=1);

namespace App\Controller;

use App\Utility\PedidosStatusEnum;
use Cake\Event\EventInterface;


/**
 * CartShop Controller
 *
 */
class CartShopController extends AppController
{

    public function beforeFilter(EventInterface $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub

        $this->Authentication->addUnauthenticatedActions(['login']);

        $user = $this->Authentication->getIdentity();
        if(isset($user) and $user->role === 'user')
        {
            if (!in_array($this->request->getParam('action'), ['index', 'edit', 'viewConfig', 'getSubCategoriesByCategory',
                'getProductById', 'addProductoToCartSession', 'getPricesByProduct', 'getDescuentosByProduct', 'deleteDescuentoById',
                'deleteProductFromCartSession'])) {
                //$this->redirect($this->request->referer());
                $this->Flash->error('Usted no esta autorizado para acceder al Sitio Solicitado');
                $this->redirect(['controller' => 'Index', 'action' => 'index']);
            }

        }
        $this->loadCartProduct();

    }


    public function index()
    {
        //debug($this->cart_product);

        $model_cart_session = $this->getTableLocator()->get('CartSession');
        $pedidos = $model_cart_session->newEmptyEntity();



        //TRaigo los clientes
        $modal_clientes = $this->getTableLocator()->get('Clientes');
        $clientes = $modal_clientes->find('all', []);
        //debug($clientes->toArray());

        $model_pedidos = $this->getTableLocator()->get('Pedidos');
        $pedidos = $model_pedidos->newEmptyEntity();




        if ($this->request->is('post')) {
            $data = $this->request->getData();

            if($data['id_cliente'] == '')
            {
                $this->Flash->error(__('Debe seleccionar un cliente'));

            } else {
                $user = $this->Authentication->getIdentity();

                $pedidos->status = PedidosStatusEnum::ORDER;
                $pedidos->users_idusers = $user->idusers;

                //traigo el max number del pedido
                $pedidos->number = $this->_getMaxNumberPedido() == null ? 1 : ($this->_getMaxNumberPedido() + 1);

                $pedidos->clientes_idclientes = $data['id_cliente'];
                $pedidos->subtotal = $data['subtotal'];
                $pedidos->descuentos = $data['total_descuentos'];
                $pedidos->total = $data['total_general'];
                $pedidos->descuento_general = $data['descuento_general'];

                $pedidos->observaciones = $data['observaciones'];

                $pedidos->hash = hash('sha256' , ($pedidos->number . date("Y-m-d")));

                //debug($data);


                if ($model_pedidos->save($pedidos)){

                    //si avanzo proceso los productos que se compraron
                    unset($data['id_cliente']);
                    unset($data['descuento_general']);
                    unset($data['observaciones']);
                    unset($data['subtotal']);
                    unset($data['total_descuentos']);
                    unset($data['total_general']);

                    $new_array = [];


                    foreach ($data as $item)
                    {

                        $item_aux = $item;
                        $item_aux['pedidos_idpedidos'] = $pedidos->idpedidos;
                        //$item['sddas'] = $pedidos->idpedidos;
                        array_push($new_array, $item_aux);

                    }


                    $model_productos_pedidos = $this->getTableLocator()->get('ProductosPedidos');
                    $productos_pedidos_entity = $model_productos_pedidos->newEntities($new_array);

                    if($model_productos_pedidos->saveMany($productos_pedidos_entity)){

                        //limpio la tabal del carrito

                        $model_cart_session->deleteAll(['users_idusers' => $user->idusers]);


                        $this->Flash->success(__('El Pedido se ha procesado correctamente'));
                        return $this->redirect(['controller' => 'pedidos' ,'action' => 'view',$pedidos->idpedidos]);

                    } else {
                        $this->Flash->error(__('El Pedido no se pudo generar. Intente nuevamente.'));
                    }

                } else {
                    $this->Flash->error(__('El Pedido no se pudo generar. Intente nuevamente.'));
                }
            }

        }

        $this->set(compact('clientes'));
        $this->set(compact('pedidos'));
    }


    private function _getMaxNumberPedido()
    {
        $model_pedidos = $this->getTableLocator()->get('Pedidos');

        return $model_pedidos->find('GetMaxNumberPedidos', [])->first()->max;

    }



    public function add()
    {

    }
}
